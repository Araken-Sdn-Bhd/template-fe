{"version":3,"file":"component-config.mjs","sources":["../../../../../src/services/component-config/component-config.ts"],"sourcesContent":["import { useLocalConfig } from '../../components/va-config/VaConfig'\nimport { useGlobalConfig } from '../global-config/global-config'\nimport { computed } from 'vue'\nimport type { VuesticComponentsMap } from '../../vuestic-plugin'\nimport type { DefineComponent, VNodeProps, AllowedComponentProps } from 'vue'\n\ntype VuesticComponentName = keyof VuesticComponentsMap\ntype VueDefaultPropNames = keyof (VNodeProps & AllowedComponentProps) | `on${string}`\n\nexport type Props = { [propName: string]: any }\nexport type Presets = { [componentName in VuesticComponentName]?: { [presetName: string]: Props } }\nexport type PropTypes<C> = C extends { new(): { $props: infer Props } } ? Omit<Props, VueDefaultPropNames> : never\nexport type ComponentConfig = Partial<{\n  // key-value hack to avoid generics in type (like Omit, PropTypes, etc.)\n  // `key: type` as result\n  [componentName in VuesticComponentName]: {\n    [key in keyof PropTypes<VuesticComponentsMap[componentName]>]: PropTypes<VuesticComponentsMap[componentName]>[key]\n  }\n} & { all: Props, presets: Presets }>\n\nexport const useComponentConfigProps = <T extends DefineComponent>(component: T, originalProps: Props) => {\n  const localConfig = useLocalConfig()\n  const { globalConfig } = useGlobalConfig()\n\n  const instancePreset = computed(() => originalProps.preset)\n  const getPresetProps = (presetName: string) => globalConfig.value.components?.presets?.[component.name as VuesticComponentName]?.[presetName]\n\n  return computed(() => {\n    const globalConfigProps: Props = {\n      ...globalConfig.value.components?.all,\n      ...globalConfig.value.components?.[component.name as VuesticComponentName],\n    }\n\n    const localConfigProps: Props = localConfig.value\n      .reduce((finalConfig, config) => config[component.name as VuesticComponentName]\n        ? { ...finalConfig, ...config[component.name as VuesticComponentName] }\n        : finalConfig\n      , {})\n\n    const presetName = instancePreset.value || localConfigProps.preset || globalConfigProps.preset\n    const presetProps = presetName && getPresetProps(presetName)\n\n    return { ...globalConfigProps, ...localConfigProps, ...presetProps }\n  })\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAoBa,MAAA,0BAA0B,CAA4B,WAAc,kBAAyB;AACxG,QAAM,cAAc;AACd,QAAA,EAAE,iBAAiB;AAEzB,QAAM,iBAAiB,SAAS,MAAM,cAAc,MAAM;AACpD,QAAA,iBAAiB,CAAC,eAAuB;;AAAA,0CAAa,MAAM,eAAnB,mBAA+B,YAA/B,mBAAyC,UAAU,UAAnD,mBAAmF;AAAA;AAElI,SAAO,SAAS,MAAM;;AACpB,UAAM,oBAA2B,kCAC5B,mBAAa,MAAM,eAAnB,mBAA+B,MAC/B,mBAAa,MAAM,eAAnB,mBAAgC,UAAU;AAG/C,UAAM,mBAA0B,YAAY,MACzC,OAAO,CAAC,aAAa,WAAW,OAAO,UAAU,QAC9C,kCAAK,cAAgB,OAAO,UAAU,SACtC,aACF,CAAA,CAAE;AAEN,UAAM,aAAa,eAAe,SAAS,iBAAiB,UAAU,kBAAkB;AAClF,UAAA,cAAc,cAAc,eAAe,UAAU;AAEpD,WAAA,iDAAK,oBAAsB,mBAAqB;AAAA,EAAY,CACpE;AACH;;"}