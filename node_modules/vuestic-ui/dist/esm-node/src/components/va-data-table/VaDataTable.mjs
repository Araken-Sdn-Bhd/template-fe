var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { defineComponent, computed, useCssVars, resolveComponent, openBlock, createBlock, mergeProps, withCtx, createVNode, normalizeStyle, createElementBlock, createCommentVNode, createElementVNode, renderSlot, normalizeProps, guardReactiveProps, normalizeClass, Fragment, renderList, withModifiers, withKeys, toDisplayString, TransitionGroup, createTextVNode } from "vue";
import { o as omit_1, p as pick_1 } from "../../../vendor.mjs";
import { s as sortingOptionsValidator, u as useColumns } from "./hooks/useColumns.mjs";
import { u as useRows } from "./hooks/useRows.mjs";
import { u as useFilterable } from "./hooks/useFilterable.mjs";
import { u as useSortable } from "./hooks/useSortable.mjs";
import { u as usePaginatedRows } from "./hooks/usePaginatedRows.mjs";
import { u as useSelectableRow } from "./hooks/useSelectableRow.mjs";
import { u as useStyleable } from "./hooks/useStylable.mjs";
import { u as useBinding } from "./hooks/useBinding.mjs";
import { u as useAnimationName } from "./hooks/useAnimationName.mjs";
import { u as useTableScrollProps, a as useTableScrollEmits, b as useTableScroll } from "./hooks/useTableScroll.mjs";

import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";


import { u as useTranslation } from "../../composables/useTranslation.mjs";
import { e as extractComponentProps } from "../../utils/child-props.mjs";
import { V as VaVirtualScroller } from "../va-virtual-scroller/index.mjs";
import { V as VaInnerLoading } from "../va-inner-loading/index.mjs";
import { V as VaCheckbox } from "../va-checkbox/index.mjs";
import { V as VaIcon } from "../va-icon/index.mjs";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.mjs";
var VaDataTable_vue_vue_type_style_index_0_lang = "";
const VaVirtualScrollerProps = extractComponentProps(VaVirtualScroller, ["items", "trackBy", "horizontal", "disabled", "table"]);
const __default__ = defineComponent({
  name: "VaDataTable",
  components: {
    VaVirtualScroller,
    VaInnerLoading,
    VaCheckbox,
    VaIcon
  },
  inheritAttrs: false,
  props: __spreadProps(__spreadValues(__spreadValues(__spreadValues({}, useComponentPresetProp), VaVirtualScrollerProps), useTableScrollProps), {
    columns: { type: Array, default: () => [] },
    items: { type: Array, default: () => [] },
    itemsTrackBy: { type: [String, Function], default: "" },
    modelValue: { type: Array },
    sortingOrder: { type: String },
    sortBy: { type: String },
    sortingOptions: {
      type: Array,
      default: () => ["asc", "desc", null],
      validator: sortingOptionsValidator
    },
    filter: { type: String, default: "" },
    filterMethod: { type: Function },
    hoverable: { type: Boolean, default: false },
    clickable: { type: Boolean, default: false },
    animated: { type: Boolean, default: true },
    selectable: { type: Boolean, default: false },
    selectMode: { type: String, default: "multiple" },
    selectedColor: { type: String, default: "primary" },
    perPage: { type: Number },
    currentPage: { type: Number },
    loading: { type: Boolean, default: false },
    loadingColor: { type: String, default: "primary" },
    noDataHtml: { type: String, default: "No items" },
    noDataFilteredHtml: { type: String, default: "No items match the provided filtering condition" },
    hideDefaultHeader: { type: Boolean, default: false },
    footerClone: { type: Boolean, default: false },
    allowFooterSorting: { type: Boolean, default: false },
    striped: { type: Boolean, default: false },
    stickyHeader: { type: Boolean, default: false },
    stickyFooter: { type: Boolean, default: false },
    height: { type: [String, Number] },
    rowBind: { type: null },
    cellBind: { type: null },
    virtualScroller: { type: Boolean, default: false },
    virtualTrackBy: { type: [String, Number], default: "initialIndex" }
  }),
  emits: [
    "update:modelValue",
    "update:sortBy",
    "update:sortingOrder",
    "filtered",
    "sorted",
    "selectionChange",
    "row:click",
    "row:dblclick",
    "row:contextmenu",
    ...useTableScrollEmits
  ],
  setup(props, { attrs, emit }) {
    const { columnsComputed } = useColumns(props);
    const { rowsComputed } = useRows(columnsComputed, props);
    const { filteredRows } = useFilterable(rowsComputed, props, emit);
    const {
      sortBySync,
      sortingOrderSync,
      toggleSorting,
      sortedRows,
      sortingOrderIconName
    } = useSortable(columnsComputed, filteredRows, props, emit);
    const { paginatedRows } = usePaginatedRows(sortedRows, props);
    const {
      ctrlSelectRow,
      shiftSelectRows,
      toggleBulkSelection,
      isRowSelected,
      severalRowsSelected,
      allRowsSelected
    } = useSelectableRow(paginatedRows, props, emit);
    const {
      CSSVariables,
      getHeaderCSSVariables,
      getCellCSSVariables,
      getFooterCSSVariables,
      getClass,
      getStyle
    } = useStyleable(props);
    const { getRowBind, getCellBind } = useBinding(props);
    const animationName = useAnimationName(props, paginatedRows);
    const showNoDataHtml = computed(() => props.items.length === 0);
    const showNoDataFilteredHtml = computed(() => paginatedRows.value.length === 0);
    const onRowClickHandler = (name, event, row) => {
      if (props.clickable) {
        emit(name, {
          event,
          item: row.source,
          itemIndex: row.initialIndex
        });
      }
    };
    const computedTableAttributes = computed(() => __spreadProps(__spreadValues({}, omit_1(attrs, ["class", "style"])), {
      class: pick_1(props, ["striped", "selectable", "hoverable", "clickable"])
    }));
    const getColumnAriaSortOrder = (columnName) => sortingOrderSync.value && sortBySync.value === columnName ? sortingOrderSync.value === "asc" ? "ascending" : "descending" : "none";
    const virtualScrollerPropsComputed = computed(() => __spreadProps(__spreadValues({}, pick_1(props, ["wrapperSize", "itemSize", "bench"])), {
      items: paginatedRows.value,
      trackBy: props.virtualTrackBy,
      disabled: !props.virtualScroller,
      table: true
    }));
    const computedAttributes = computed(() => __spreadValues({
      class: [
        { "va-data-table--sticky": props.stickyHeader || props.stickyFooter },
        { "va-data-table--scroll": !!props.height },
        { "va-data-table--virtual-scroller": props.virtualScroller },
        attrs.class
      ],
      style: [attrs.style]
    }, virtualScrollerPropsComputed.value));
    const {
      scrollContainer,
      topTrigger,
      bottomTrigger,
      doRenderTopTrigger,
      doRenderBottomTrigger
    } = useTableScroll(props, emit);
    return __spreadProps(__spreadValues({}, useTranslation()), {
      scrollContainer,
      topTrigger,
      bottomTrigger,
      columnsComputed,
      ctrlSelectRow,
      shiftSelectRows,
      toggleBulkSelection,
      isRowSelected,
      severalRowsSelected,
      allRowsSelected,
      sortBySync,
      sortingOrderSync,
      toggleSorting,
      sortingOrderIconName,
      CSSVariables,
      getHeaderCSSVariables,
      getCellCSSVariables,
      getFooterCSSVariables,
      getClass,
      getStyle,
      showNoDataHtml,
      showNoDataFilteredHtml,
      onRowClickHandler,
      computedAttributes,
      computedTableAttributes,
      animationName,
      getColumnAriaSortOrder,
      getRowBind,
      getCellBind,
      doRenderTopTrigger,
      doRenderBottomTrigger
    });
  }
});
const __injectCSSVars__ = () => {
  useCssVars((_ctx) => ({
    "f1d7a5de": _ctx.CSSVariables.selectedColor,
    "48be8ec4": _ctx.CSSVariables.hoverColor,
    "5d7a2744": _ctx.CSSVariables.tableHeight,
    "1bf46bfc": _ctx.CSSVariables.theadBg,
    "21a0c5e0": _ctx.CSSVariables.tfootBg
  }));
};
const __setup__ = __default__.setup;
__default__.setup = __setup__ ? (props, ctx) => {
  __injectCSSVars__();
  return __setup__(props, ctx);
} : __injectCSSVars__;
const _sfc_main = __default__;
const _hoisted_1 = {
  key: 0,
  ref: "topTrigger",
  class: "va-data-table__scroll-trigger"
};
const _hoisted_2 = { key: 0 };
const _hoisted_3 = {
  key: 0,
  class: "va-data-table__table-tr"
};
const _hoisted_4 = {
  key: 0,
  scope: "col",
  class: "va-data-table__table-th va-data-table__table-cell-select"
};
const _hoisted_5 = ["aria-sort", "aria-label", "title", "onClick", "onKeydown"];
const _hoisted_6 = { class: "va-data-table__table-th-wrapper" };
const _hoisted_7 = { key: 0 };
const _hoisted_8 = {
  ref: "list",
  class: "va-data-table__table-tbody"
};
const _hoisted_9 = { key: "showNoDataHtml" };
const _hoisted_10 = ["colspan", "innerHTML"];
const _hoisted_11 = { key: "showNoDataFilteredHtml" };
const _hoisted_12 = ["colspan", "innerHTML"];
const _hoisted_13 = ["onClick", "onDblclick", "onContextmenu"];
const _hoisted_14 = {
  key: 0,
  class: "va-data-table__table-tr"
};
const _hoisted_15 = {
  key: 0,
  class: "va-data-table__table-th va-data-table__table-cell-select"
};
const _hoisted_16 = ["title", "aria-label", "onClick", "onKeydown"];
const _hoisted_17 = { class: "va-data-table__table-th-wrapper" };
const _hoisted_18 = { key: 0 };
const _hoisted_19 = {
  key: 1,
  ref: "bottomTrigger",
  class: "va-data-table__scroll-trigger"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_checkbox = resolveComponent("va-checkbox");
  const _component_va_icon = resolveComponent("va-icon");
  const _component_va_inner_loading = resolveComponent("va-inner-loading");
  const _component_va_virtual_scroller = resolveComponent("va-virtual-scroller");
  return openBlock(), createBlock(_component_va_virtual_scroller, mergeProps({ class: "va-data-table" }, _ctx.computedAttributes), {
    content: withCtx(({
      uniqueKey,
      renderBuffer,
      currentListOffset,
      listStyleComputed,
      containerStyleComputed
    }) => [
      createVNode(_component_va_inner_loading, {
        ref: "scrollContainer",
        "aria-live": "polite",
        style: normalizeStyle(containerStyleComputed),
        loading: _ctx.loading,
        color: _ctx.loadingColor
      }, {
        default: withCtx(() => [
          _ctx.doRenderTopTrigger ? (openBlock(), createElementBlock("div", _hoisted_1, null, 512)) : createCommentVNode("", true),
          createElementVNode("table", mergeProps({
            class: "va-data-table__table",
            style: listStyleComputed
          }, _ctx.computedTableAttributes), [
            "colgroup" in _ctx.$slots ? (openBlock(), createElementBlock("colgroup", _hoisted_2, [
              renderSlot(_ctx.$slots, "colgroup", normalizeProps(guardReactiveProps(_ctx.columnsComputed)))
            ])) : createCommentVNode("", true),
            createElementVNode("thead", {
              class: normalizeClass(["va-data-table__table-thead", { "va-data-table__table-thead--sticky": _ctx.$props.stickyHeader }]),
              style: normalizeStyle({ top: _ctx.$props.virtualScroller && _ctx.$props.stickyHeader ? `-${currentListOffset}px` : void 0 })
            }, [
              renderSlot(_ctx.$slots, "headerPrepend"),
              !_ctx.hideDefaultHeader ? (openBlock(), createElementBlock("tr", _hoisted_3, [
                _ctx.selectable ? (openBlock(), createElementBlock("th", _hoisted_4, [
                  _ctx.selectMode === "multiple" ? (openBlock(), createBlock(_component_va_checkbox, {
                    key: 0,
                    class: "va-data-table__table-cell-checkbox",
                    "aria-label": _ctx.t("selectAllRows"),
                    "model-value": _ctx.severalRowsSelected ? "idl" : _ctx.allRowsSelected,
                    "true-value": true,
                    "false-value": false,
                    color: _ctx.selectedColor,
                    "indeterminate-value": "idl",
                    indeterminate: "",
                    "onUpdate:modelValue": _ctx.toggleBulkSelection
                  }, null, 8, ["aria-label", "model-value", "color", "onUpdate:modelValue"])) : createCommentVNode("", true)
                ])) : createCommentVNode("", true),
                (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.columnsComputed, (column) => {
                  return openBlock(), createElementBlock("th", {
                    key: column.name,
                    scope: "col",
                    "aria-sort": _ctx.getColumnAriaSortOrder(column.name),
                    "aria-label": column.sortable ? _ctx.t(`sortColumnBy`, { name: column.label }) : void 0,
                    title: column.thTitle,
                    class: normalizeClass(["va-data-table__table-th", _ctx.getClass(column.thClass)]),
                    style: normalizeStyle([_ctx.getHeaderCSSVariables(column), _ctx.getStyle(column.thStyle)]),
                    onClick: withModifiers(($event) => column.sortable && _ctx.toggleSorting(column), ["exact"]),
                    onKeydown: withKeys(withModifiers(($event) => column.sortable && _ctx.toggleSorting(column), ["stop"]), ["enter"])
                  }, [
                    createElementVNode("div", _hoisted_6, [
                      `header(${column.name})` in _ctx.$slots ? (openBlock(), createElementBlock("span", _hoisted_7, [
                        renderSlot(_ctx.$slots, `header(${column.name})`, normalizeProps(guardReactiveProps({ label: column.label, key: column.key })))
                      ])) : renderSlot(_ctx.$slots, "header", normalizeProps(mergeProps({ key: 1 }, { label: column.label, key: column.key })), () => [
                        createElementVNode("span", null, toDisplayString(column.label), 1)
                      ]),
                      column.sortable ? (openBlock(), createElementBlock("div", {
                        key: 2,
                        class: "va-data-table__table-th-sorting",
                        "aria-hidden": "true",
                        onSelectstart: _cache[0] || (_cache[0] = withModifiers(() => {
                        }, ["prevent"]))
                      }, [
                        createVNode(_component_va_icon, {
                          role: column.sortable ? "button" : void 0,
                          tabindex: column.sortable ? 0 : -1,
                          name: _ctx.sortingOrderIconName,
                          size: "small",
                          class: normalizeClass(["va-data-table__table-th-sorting-icon", { active: _ctx.sortBySync === column.name && _ctx.sortingOrderSync !== null }])
                        }, null, 8, ["role", "tabindex", "name", "class"])
                      ], 32)) : createCommentVNode("", true)
                    ])
                  ], 46, _hoisted_5);
                }), 128))
              ])) : createCommentVNode("", true),
              renderSlot(_ctx.$slots, "headerAppend")
            ], 6),
            createElementVNode("tbody", _hoisted_8, [
              renderSlot(_ctx.$slots, "bodyPrepend"),
              createVNode(TransitionGroup, {
                name: _ctx.$props.virtualScroller ? "" : _ctx.animationName,
                css: !_ctx.$props.virtualScroller,
                appear: !_ctx.$props.virtualScroller
              }, {
                default: withCtx(() => [
                  _ctx.showNoDataHtml ? (openBlock(), createElementBlock("tr", _hoisted_9, [
                    createElementVNode("td", {
                      class: "no-data",
                      colspan: _ctx.columnsComputed.length + (_ctx.selectable ? 1 : 0),
                      innerHTML: _ctx.noDataHtml
                    }, null, 8, _hoisted_10)
                  ])) : _ctx.showNoDataFilteredHtml ? (openBlock(), createElementBlock("tr", _hoisted_11, [
                    createElementVNode("td", {
                      class: "no-data",
                      colspan: _ctx.columnsComputed.length + (_ctx.selectable ? 1 : 0),
                      innerHTML: _ctx.noDataFilteredHtml
                    }, null, 8, _hoisted_12)
                  ])) : createCommentVNode("", true),
                  (openBlock(true), createElementBlock(Fragment, null, renderList(renderBuffer, (row, index) => {
                    return openBlock(), createElementBlock("tr", mergeProps({
                      key: `table-row_${uniqueKey(row, index)}`,
                      class: ["va-data-table__table-tr", [{ selected: _ctx.isRowSelected(row) }]]
                    }, _ctx.getRowBind(row), {
                      onClick: ($event) => _ctx.onRowClickHandler("row:click", $event, row),
                      onDblclick: ($event) => _ctx.onRowClickHandler("row:dblclick", $event, row),
                      onContextmenu: ($event) => _ctx.onRowClickHandler("row:contextmenu", $event, row)
                    }), [
                      _ctx.selectable ? (openBlock(), createElementBlock("td", {
                        class: "va-data-table__table-td va-data-table__table-cell-select",
                        key: `selectable_${uniqueKey(row, index)}`,
                        onSelectstart: _cache[1] || (_cache[1] = withModifiers(() => {
                        }, ["prevent"]))
                      }, [
                        createVNode(_component_va_checkbox, {
                          class: "va-data-table__table-cell-checkbox",
                          "model-value": _ctx.isRowSelected(row),
                          color: _ctx.selectedColor,
                          "aria-label": _ctx.t(`selectRowByIndex`, { index: row.initialIndex }),
                          onClick: [
                            withModifiers(($event) => _ctx.shiftSelectRows(row), ["shift", "exact", "stop"]),
                            withModifiers(($event) => _ctx.ctrlSelectRow(row), ["ctrl", "exact", "stop"]),
                            withModifiers(($event) => _ctx.ctrlSelectRow(row), ["exact", "stop"])
                          ]
                        }, null, 8, ["model-value", "color", "aria-label", "onClick"])
                      ], 32)) : createCommentVNode("", true),
                      (openBlock(true), createElementBlock(Fragment, null, renderList(row.cells, (cell) => {
                        return openBlock(), createElementBlock("td", mergeProps({
                          key: `table-cell_${cell.column.name + cell.rowIndex}`,
                          class: ["va-data-table__table-td", _ctx.getClass(cell.column.tdClass)],
                          style: [_ctx.getCellCSSVariables(cell), _ctx.getStyle(cell.column.tdStyle)]
                        }, _ctx.getCellBind(cell, row)), [
                          `cell(${cell.column.name})` in _ctx.$slots ? renderSlot(_ctx.$slots, `cell(${cell.column.name})`, normalizeProps(mergeProps({ key: 0 }, cell))) : renderSlot(_ctx.$slots, "cell", normalizeProps(mergeProps({ key: 1 }, cell)), () => [
                            createTextVNode(toDisplayString(cell.value), 1)
                          ])
                        ], 16);
                      }), 128))
                    ], 16, _hoisted_13);
                  }), 128))
                ]),
                _: 2
              }, 1032, ["name", "css", "appear"]),
              renderSlot(_ctx.$slots, "bodyAppend")
            ], 512),
            _ctx.footerClone ? (openBlock(), createElementBlock("tfoot", {
              key: 1,
              class: normalizeClass(["va-data-table__table-tfoot", { "va-data-table__table-tfoot--sticky": _ctx.$props.stickyFooter }]),
              style: normalizeStyle({ bottom: _ctx.$props.virtualScroller && _ctx.$props.stickyFooter ? `${currentListOffset}px` : void 0 })
            }, [
              renderSlot(_ctx.$slots, "footerPrepend"),
              !_ctx.hideDefaultHeader ? (openBlock(), createElementBlock("tr", _hoisted_14, [
                _ctx.selectable ? (openBlock(), createElementBlock("th", _hoisted_15, [
                  _ctx.selectMode === "multiple" ? (openBlock(), createBlock(_component_va_checkbox, {
                    key: 0,
                    class: "va-data-table__table-cell-checkbox",
                    "aria-label": _ctx.t("selectAllRows"),
                    "model-value": _ctx.severalRowsSelected ? "idl" : _ctx.allRowsSelected,
                    "true-value": true,
                    "false-value": false,
                    color: _ctx.selectedColor,
                    "indeterminate-value": "idl",
                    indeterminate: "",
                    "onUpdate:modelValue": _ctx.toggleBulkSelection
                  }, null, 8, ["aria-label", "model-value", "color", "onUpdate:modelValue"])) : createCommentVNode("", true)
                ])) : createCommentVNode("", true),
                (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.columnsComputed, (column) => {
                  return openBlock(), createElementBlock("th", {
                    key: column.name,
                    title: column.thTitle,
                    "aria-label": _ctx.allowFooterSorting && column.sortable ? _ctx.t(`sortColumnBy`, { name: column.label }) : void 0,
                    class: normalizeClass(["va-data-table__table-th", _ctx.getClass(column.thClass)]),
                    style: normalizeStyle([_ctx.getFooterCSSVariables(column), _ctx.getStyle(column.thStyle)]),
                    onClick: withModifiers(($event) => _ctx.allowFooterSorting && column.sortable && _ctx.toggleSorting(column), ["exact"]),
                    onKeydown: withKeys(withModifiers(($event) => _ctx.allowFooterSorting && column.sortable && _ctx.toggleSorting(column), ["stop"]), ["enter"])
                  }, [
                    createElementVNode("div", _hoisted_17, [
                      `footer(${column.name})` in _ctx.$slots ? (openBlock(), createElementBlock("span", _hoisted_18, [
                        renderSlot(_ctx.$slots, `footer(${column.name})`, normalizeProps(guardReactiveProps({ label: column.label, key: column.key })))
                      ])) : renderSlot(_ctx.$slots, "footer", normalizeProps(mergeProps({ key: 1 }, column)), () => [
                        createElementVNode("span", null, toDisplayString(column.label), 1)
                      ]),
                      _ctx.allowFooterSorting && column.sortable ? (openBlock(), createElementBlock("div", {
                        key: 2,
                        class: "va-data-table__table-th-sorting",
                        onSelectstart: _cache[2] || (_cache[2] = withModifiers(() => {
                        }, ["prevent"]))
                      }, [
                        createVNode(_component_va_icon, {
                          role: _ctx.allowFooterSorting && column.sortable ? "button" : void 0,
                          tabindex: _ctx.allowFooterSorting && column.sortable ? 0 : -1,
                          name: _ctx.sortingOrderIconName,
                          size: "small",
                          class: normalizeClass(["va-data-table__table-th-sorting-icon", { active: _ctx.sortBySync === column.name && _ctx.sortingOrderSync !== null }])
                        }, null, 8, ["role", "tabindex", "name", "class"])
                      ], 32)) : createCommentVNode("", true)
                    ])
                  ], 46, _hoisted_16);
                }), 128))
              ])) : createCommentVNode("", true),
              renderSlot(_ctx.$slots, "footerAppend")
            ], 6)) : createCommentVNode("", true)
          ], 16),
          _ctx.doRenderBottomTrigger ? (openBlock(), createElementBlock("div", _hoisted_19, null, 512)) : createCommentVNode("", true)
        ]),
        _: 2
      }, 1032, ["style", "loading", "color"])
    ]),
    _: 3
  }, 16);
}
var _VaDataTable = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaDataTable as _ };
//# sourceMappingURL=VaDataTable.mjs.map
