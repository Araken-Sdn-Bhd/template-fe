var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { defineComponent, resolveComponent, openBlock, createElementBlock, createElementVNode, Fragment, renderList, createBlock } from "vue";


import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";


import { u as useStatefulEmits, a as useStatefulProps, b as useStateful } from "../../composables/useStateful.mjs";
import { u as useTranslation } from "../../composables/useTranslation.mjs";
import { V as VaColorIndicator } from "../va-color-indicator/index.mjs";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.mjs";
var VaColorPalette_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaColorPalette",
  components: { VaColorIndicator },
  emits: useStatefulEmits,
  props: __spreadProps(__spreadValues(__spreadValues({}, useStatefulProps), useComponentPresetProp), {
    modelValue: { type: String, default: null },
    palette: { type: Array, default: () => [] },
    indicator: {
      type: String,
      default: "dot",
      validator: (value) => ["dot", "square"].includes(value)
    }
  }),
  setup(props, { emit }) {
    const { valueComputed } = useStateful(props, emit);
    return __spreadProps(__spreadValues({}, useTranslation()), {
      valueComputed,
      isSelected: (color) => valueComputed.value === color
    });
  }
});
const _hoisted_1 = { class: "va-color-palette" };
const _hoisted_2 = ["aria-label"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_color_indicator = resolveComponent("va-color-indicator");
  return openBlock(), createElementBlock("div", _hoisted_1, [
    createElementVNode("ul", {
      class: "va-color-palette__colors",
      role: "listbox",
      "aria-label": _ctx.t("colorSelection")
    }, [
      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.palette, (color, index) => {
        return openBlock(), createBlock(_component_va_color_indicator, {
          key: index,
          role: "option",
          "aria-label": _ctx.t("color", { color }),
          "aria-selected": _ctx.isSelected(color),
          tabindex: "0",
          modelValue: _ctx.isSelected(color),
          color,
          square: _ctx.indicator === "square",
          "onUpdate:modelValue": ($event) => _ctx.valueComputed = color
        }, null, 8, ["aria-label", "aria-selected", "modelValue", "color", "square", "onUpdate:modelValue"]);
      }), 128))
    ], 8, _hoisted_2)
  ]);
}
var _VaColorPalette = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaColorPalette as _ };
//# sourceMappingURL=VaColorPalette.mjs.map
