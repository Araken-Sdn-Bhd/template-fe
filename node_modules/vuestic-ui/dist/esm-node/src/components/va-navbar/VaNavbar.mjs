var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { defineComponent, computed, openBlock, createElementBlock, normalizeStyle, createElementVNode, renderSlot, createCommentVNode } from "vue";

import { u as useColors } from "../../composables/useColors.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";

import { u as useFixedBarProps, a as useFixedBar } from "../../composables/useFixedBar.mjs";

import { s as setupScroll } from "../../composables/useScroll.mjs";
import { u as useTextColor } from "../../composables/useTextColor.mjs";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.mjs";
var VaNavbar_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaNavbar",
  props: __spreadProps(__spreadValues(__spreadValues({}, useFixedBarProps), useComponentPresetProp), {
    color: { type: String, default: "background-secondary" },
    textColor: { type: String },
    shape: { type: Boolean, default: false }
  }),
  setup(props) {
    const { scrollRoot, isScrolledDown } = setupScroll(props.fixed);
    const { fixedBarStyleComputed } = useFixedBar(props, isScrolledDown);
    const { getColor, shiftHSLAColor } = useColors();
    const { textColorComputed } = useTextColor();
    const color = computed(() => getColor(props.color));
    const shapeStyleComputed = computed(() => ({
      borderTopColor: shiftHSLAColor(color.value, { h: -1, s: -11, l: 10 })
    }));
    const computedStyle = computed(() => __spreadProps(__spreadValues({}, fixedBarStyleComputed.value), {
      backgroundColor: color.value,
      color: textColorComputed.value,
      fill: textColorComputed.value
    }));
    return { computedStyle, shapeStyleComputed, scrollRoot };
  }
});
const _hoisted_1 = { class: "va-navbar__content" };
const _hoisted_2 = {
  key: 0,
  class: "va-navbar__left"
};
const _hoisted_3 = {
  key: 1,
  class: "va-navbar__center"
};
const _hoisted_4 = {
  key: 2,
  class: "va-navbar__right"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("header", {
    ref: "scrollRoot",
    class: "va-navbar",
    style: normalizeStyle(_ctx.computedStyle)
  }, [
    createElementVNode("div", _hoisted_1, [
      _ctx.$slots.left ? (openBlock(), createElementBlock("div", _hoisted_2, [
        renderSlot(_ctx.$slots, "left")
      ])) : createCommentVNode("", true),
      _ctx.$slots.center ? (openBlock(), createElementBlock("div", _hoisted_3, [
        renderSlot(_ctx.$slots, "center")
      ])) : createCommentVNode("", true),
      _ctx.$slots.right ? (openBlock(), createElementBlock("div", _hoisted_4, [
        renderSlot(_ctx.$slots, "right")
      ])) : createCommentVNode("", true)
    ]),
    _ctx.shape ? (openBlock(), createElementBlock("div", {
      key: 0,
      class: "va-navbar__background-shape",
      style: normalizeStyle(_ctx.shapeStyleComputed)
    }, null, 4)) : createCommentVNode("", true)
  ], 4);
}
var _VaNavbar = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaNavbar as _ };
//# sourceMappingURL=VaNavbar.mjs.map
