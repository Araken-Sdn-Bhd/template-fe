import { Ref } from 'vue';
import { GlobalConfig, GlobalConfigUpdater, PartialGlobalConfig } from './types';
export declare type ProvidedGlobalConfig = {
    globalConfig: Ref<GlobalConfig>;
    getGlobalConfig: () => GlobalConfig;
    /**
     * Set new global config
     * @see mergeGlobalConfig if you want to update existing config
     */
    setGlobalConfig: (updater: GlobalConfig | GlobalConfigUpdater<GlobalConfig>) => void;
    mergeGlobalConfig: (updater: PartialGlobalConfig | GlobalConfigUpdater<PartialGlobalConfig>) => void;
};
export declare const GLOBAL_CONFIG: unique symbol;
export declare const createGlobalConfig: () => {
    getGlobalConfig: () => GlobalConfig;
    setGlobalConfig: (updater: GlobalConfig | GlobalConfigUpdater<GlobalConfig>) => void;
    mergeGlobalConfig: (updater: PartialGlobalConfig | GlobalConfigUpdater<PartialGlobalConfig>) => void;
    globalConfig: Ref<{
        colors: {
            variables: {
                [x: string]: string;
                primary: string;
                secondary: string;
                success: string;
                info: string;
                danger: string;
                warning: string;
                backgroundPrimary: string;
                backgroundSecondary: string;
                backgroundElement: string;
                backgroundBorder: string;
                textPrimary: string;
                textInverted: string;
                shadow: string;
                focus: string;
            };
            threshold: number;
            presets: {
                [x: string]: {
                    [x: string]: string;
                    primary: string;
                    secondary: string;
                    success: string;
                    info: string;
                    danger: string;
                    warning: string;
                    backgroundPrimary: string;
                    backgroundSecondary: string;
                    backgroundElement: string;
                    backgroundBorder: string;
                    textPrimary: string;
                    textInverted: string;
                    shadow: string;
                    focus: string;
                };
                light: {
                    [x: string]: string;
                    primary: string;
                    secondary: string;
                    success: string;
                    info: string;
                    danger: string;
                    warning: string;
                    backgroundPrimary: string;
                    backgroundSecondary: string;
                    backgroundElement: string;
                    backgroundBorder: string;
                    textPrimary: string;
                    textInverted: string;
                    shadow: string;
                    focus: string;
                };
                dark: {
                    [x: string]: string;
                    primary: string;
                    secondary: string;
                    success: string;
                    info: string;
                    danger: string;
                    warning: string;
                    backgroundPrimary: string;
                    backgroundSecondary: string;
                    backgroundElement: string;
                    backgroundBorder: string;
                    textPrimary: string;
                    textInverted: string;
                    shadow: string;
                    focus: string;
                };
            };
            currentPresetName: string;
        };
        icons: ({
            name: string;
            resolve?: ((dynamicSegments: {
                [dynamicSegment: string]: string;
            }) => import("../icon-config/types").IconProps) | undefined;
            attrs?: Record<string, string | ((...args: any[]) => unknown)> | undefined;
            component?: any;
            content?: string | undefined;
            class?: string | undefined;
            tag?: string | undefined;
            color?: string | undefined;
            rotation?: string | number | undefined;
            spin?: boolean | "clockwise" | "counter-clockwise" | undefined;
            to?: string | undefined;
        } | {
            name: {
                exec: (string: string) => RegExpExecArray | null;
                test: (string: string) => boolean;
                readonly source: string;
                readonly global: boolean;
                readonly ignoreCase: boolean;
                readonly multiline: boolean;
                lastIndex: number;
                compile: (pattern: string, flags?: string | undefined) => RegExp;
                readonly flags: string;
                readonly sticky: boolean;
                readonly unicode: boolean;
                readonly dotAll: boolean;
                [Symbol.match]: (string: string) => RegExpMatchArray | null;
                [Symbol.replace]: {
                    (string: string, replaceValue: string): string;
                    (string: string, replacer: (substring: string, ...args: any[]) => string): string;
                };
                [Symbol.search]: (string: string) => number;
                [Symbol.split]: (string: string, limit?: number | undefined) => string[];
                [Symbol.matchAll]: (str: string) => IterableIterator<RegExpMatchArray>;
            };
            resolveFromRegex?: ((...regexGroupValues: string[]) => import("../icon-config/types").IconProps) | undefined;
            attrs?: Record<string, string | ((...args: any[]) => unknown)> | undefined;
            component?: any;
            content?: string | undefined;
            class?: string | undefined;
            tag?: string | undefined;
            color?: string | undefined;
            rotation?: string | number | undefined;
            spin?: boolean | "clockwise" | "counter-clockwise" | undefined;
            to?: string | undefined;
        })[];
        components: {
            VaAccordion?: {
                preset?: string | undefined;
                modelValue?: boolean[] | undefined;
                multiple?: boolean | undefined;
                inset?: boolean | undefined;
                popout?: boolean | undefined;
                stateful?: boolean | undefined;
            } | undefined;
            VaAffix?: {
                preset?: string | undefined;
                offsetTop?: number | undefined;
                offsetBottom?: number | undefined;
                target?: Window | HTMLElement | (() => Window | HTMLElement) | undefined;
            } | undefined;
            VaAlert?: {
                title?: string | undefined;
                description?: string | undefined;
                preset?: string | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                textColor?: string | undefined;
                icon?: string | undefined;
                closeText?: string | undefined;
                closeable?: boolean | undefined;
                dense?: boolean | undefined;
                outline?: boolean | undefined;
                center?: boolean | undefined;
                borderColor?: string | undefined;
                border?: "" | "top" | "bottom" | "right" | "left" | undefined;
            } | undefined;
            VaAppBar?: {
                fixed?: boolean | undefined;
                preset?: string | undefined;
                target?: string | HTMLElement | undefined;
                bottom?: boolean | undefined;
                color?: string | undefined;
                gradient?: boolean | undefined;
                shadowOnScroll?: boolean | undefined;
                shadowColor?: string | undefined;
                hideOnScroll?: boolean | undefined;
            } | undefined;
            VaAvatar?: {
                preset?: string | undefined;
                color?: string | undefined;
                size?: string | number | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                fontSize?: string | undefined;
                readonly textColor?: string | undefined;
                icon?: string | undefined;
                square?: boolean | undefined;
                src?: string | undefined;
                alt?: string | undefined;
                loading?: boolean | undefined;
            } | undefined;
            VaBacktop?: {
                preset?: string | undefined;
                target?: string | Element | undefined;
                color?: string | undefined;
                visibilityHeight?: number | undefined;
                speed?: number | undefined;
                verticalOffset?: string | undefined;
                horizontalOffset?: string | undefined;
                horizontalPosition?: "right" | "left" | undefined;
                verticalPosition?: "top" | "bottom" | undefined;
            } | undefined;
            VaBadge?: {
                text?: string | number | undefined;
                preset?: string | undefined;
                bottom?: boolean | undefined;
                color?: string | undefined;
                left?: boolean | undefined;
                readonly textColor?: string | undefined;
                transparent?: boolean | undefined;
                overlap?: boolean | undefined;
                multiLine?: boolean | undefined;
                visibleEmpty?: boolean | undefined;
                dot?: boolean | undefined;
            } | undefined;
            VaBreadcrumbs?: {
                preset?: string | undefined;
                vertical?: boolean | undefined;
                color?: string | undefined;
                separator?: string | undefined;
                activeColor?: string | undefined;
                separatorColor?: string | undefined;
                align?: string | undefined;
            } | undefined;
            VaBreadcrumbsItem?: {
                replace?: boolean | undefined;
                label?: string | undefined;
                target?: string | undefined;
                tag?: string | undefined;
                disabled?: boolean | undefined;
                to?: string | Record<string, any> | undefined;
                append?: boolean | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                href?: string | undefined;
            } | undefined;
            VaButton?: {
                replace?: boolean | undefined;
                type?: string | undefined;
                preset?: string | undefined;
                target?: string | undefined;
                tag?: string | undefined;
                color?: string | undefined;
                size?: "small" | "medium" | "large" | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                textColor?: string | undefined;
                icon?: string | undefined;
                borderColor?: string | undefined;
                gradient?: boolean | undefined;
                loading?: boolean | undefined;
                block?: boolean | undefined;
                disabled?: boolean | undefined;
                textOpacity?: number | undefined;
                backgroundOpacity?: number | undefined;
                plain?: boolean | undefined;
                round?: boolean | undefined;
                iconRight?: string | undefined;
                iconColor?: string | undefined;
                to?: string | Record<string, any> | undefined;
                append?: boolean | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                href?: string | undefined;
                pressedBehavior?: "mask" | "opacity" | undefined;
                pressedOpacity?: number | undefined;
                pressedMaskColor?: string | undefined;
                hoverBehavior?: "mask" | "opacity" | undefined;
                hoverOpacity?: number | undefined;
                hoverMaskColor?: string | undefined;
            } | undefined;
            VaButtonDropdown?: {
                readonly?: boolean | undefined;
                replace?: boolean | undefined;
                split?: boolean | undefined;
                readonly label?: string | undefined;
                type?: string | undefined;
                preset?: string | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                target?: import("../../composables").MaybeHTMLElementOrSelector;
                tag?: string | undefined;
                color?: string | undefined;
                size?: "small" | "medium" | "large" | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                textColor?: string | undefined;
                icon?: string | undefined;
                borderColor?: string | undefined;
                gradient?: boolean | undefined;
                loading?: boolean | undefined;
                disabled?: boolean | undefined;
                textOpacity?: number | undefined;
                backgroundOpacity?: number | undefined;
                plain?: boolean | undefined;
                round?: boolean | undefined;
                iconColor?: string | undefined;
                to?: string | Record<string, any> | undefined;
                append?: boolean | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                href?: string | undefined;
                pressedBehavior?: "mask" | "opacity" | undefined;
                pressedOpacity?: number | undefined;
                pressedMaskColor?: string | undefined;
                hoverBehavior?: "mask" | "opacity" | undefined;
                hoverOpacity?: number | undefined;
                hoverMaskColor?: string | undefined;
                leftIcon?: boolean | undefined;
                anchorSelector?: string | undefined;
                innerAnchorSelector?: string | undefined;
                preventOverflow?: boolean | undefined;
                keepAnchorWidth?: boolean | undefined;
                isContentHoverable?: boolean | undefined;
                closeOnContentClick?: boolean | undefined;
                closeOnClickOutside?: boolean | undefined;
                closeOnAnchorClick?: boolean | undefined;
                hoverOverTimeout?: number | undefined;
                hoverOutTimeout?: number | undefined;
                offset?: number | [number, number] | undefined;
                stickToEdges?: boolean | undefined;
                autoPlacement?: boolean | undefined;
                cursor?: boolean | undefined;
                trigger?: "none" | "click" | "right-click" | "hover" | "dblclick" | undefined;
                placement?: import("../../components").Placement | undefined;
                keyboardNavigation?: boolean | undefined;
                openedIcon?: string | undefined;
                hideIcon?: boolean | undefined;
                disableButton?: boolean | undefined;
                disableDropdown?: boolean | undefined;
                splitTo?: string | undefined;
                splitHref?: string | undefined;
            } | undefined;
            VaButtonGroup?: {
                replace?: boolean | undefined;
                type?: string | undefined;
                preset?: string | undefined;
                target?: string | undefined;
                tag?: string | undefined;
                color?: string | undefined;
                size?: "small" | "medium" | "large" | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                textColor?: string | undefined;
                icon?: string | undefined;
                borderColor?: string | undefined;
                gradient?: boolean | undefined;
                loading?: boolean | undefined;
                disabled?: boolean | undefined;
                textOpacity?: number | undefined;
                backgroundOpacity?: number | undefined;
                plain?: boolean | undefined;
                round?: boolean | undefined;
                iconRight?: string | undefined;
                iconColor?: string | undefined;
                to?: string | Record<string, any> | undefined;
                append?: boolean | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                href?: string | undefined;
                pressedBehavior?: "mask" | "opacity" | undefined;
                pressedOpacity?: number | undefined;
                pressedMaskColor?: string | undefined;
                hoverBehavior?: "mask" | "opacity" | undefined;
                hoverOpacity?: number | undefined;
                hoverMaskColor?: string | undefined;
                grow?: boolean | undefined;
            } | undefined;
            VaButtonToggle?: {
                replace?: boolean | undefined;
                type?: string | undefined;
                preset?: string | undefined;
                modelValue?: string | number | undefined;
                target?: string | undefined;
                tag?: string | undefined;
                color?: string | undefined;
                size?: "small" | "medium" | "large" | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                textColor?: string | undefined;
                icon?: string | undefined;
                borderColor?: string | undefined;
                gradient?: boolean | undefined;
                loading?: boolean | undefined;
                disabled?: boolean | undefined;
                textOpacity?: number | undefined;
                backgroundOpacity?: number | undefined;
                plain?: boolean | undefined;
                round?: boolean | undefined;
                iconRight?: string | undefined;
                iconColor?: string | undefined;
                to?: string | Record<string, any> | undefined;
                append?: boolean | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                href?: string | undefined;
                pressedBehavior?: "mask" | "opacity" | undefined;
                pressedOpacity?: number | undefined;
                pressedMaskColor?: string | undefined;
                hoverBehavior?: "mask" | "opacity" | undefined;
                hoverOpacity?: number | undefined;
                hoverMaskColor?: string | undefined;
                grow?: boolean | undefined;
                readonly options: {
                    value: any;
                    label?: string | undefined;
                    icon?: string | undefined;
                    iconRight?: string | undefined;
                }[];
                readonly activeButtonTextColor?: string | undefined;
                toggleColor?: string | undefined;
            } | undefined;
            VaCard?: {
                replace?: boolean | undefined;
                preset?: string | undefined;
                target?: string | undefined;
                tag?: string | undefined;
                color?: string | undefined;
                readonly textColor?: string | undefined;
                gradient?: boolean | undefined;
                square?: boolean | undefined;
                disabled?: boolean | undefined;
                to?: string | Record<string, any> | undefined;
                append?: boolean | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                href?: string | undefined;
                bordered?: boolean | undefined;
                outlined?: boolean | undefined;
                stripe?: boolean | undefined;
                stripeColor?: string | undefined;
            } | undefined;
            VaCardActions?: {
                preset?: string | undefined;
                vertical?: boolean | undefined;
                align?: string | undefined;
            } | undefined;
            VaCardContent?: {} | undefined;
            VaCardTitle?: {
                preset?: string | undefined;
                readonly textColor?: string | undefined;
            } | undefined;
            VaCarousel?: {
                effect?: "transition" | "fade" | undefined;
                preset?: string | undefined;
                modelValue?: number | undefined;
                stateful?: boolean | undefined;
                readonly items: any[];
                vertical?: boolean | undefined;
                color?: string | undefined;
                src?: string | undefined;
                alt?: string | undefined;
                readonly ratio?: number | undefined;
                contain?: boolean | undefined;
                draggable?: boolean | undefined;
                autoscroll?: boolean | undefined;
                autoscrollInterval?: number | undefined;
                autoscrollPauseDuration?: number | undefined;
                infinite?: boolean | undefined;
                fadeKeyframe?: string | undefined;
                arrows?: boolean | undefined;
                indicators?: boolean | undefined;
                indicatorTrigger?: "click" | "hover" | undefined;
                height?: string | undefined;
                swipable?: boolean | undefined;
                swipeDistance?: number | undefined;
                swipeDirection?: ("all" | "horizontal" | "vertical" | ("" | "right" | "left" | "up" | "down")) | undefined;
            } | undefined;
            VaCheckbox?: {
                readonly?: boolean | undefined;
                label?: string | undefined;
                name?: string | undefined;
                preset?: string | undefined;
                modelValue?: string | number | boolean | unknown[] | Record<any, unknown> | null | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                indeterminate?: boolean | undefined;
                loading?: boolean | undefined;
                disabled?: boolean | undefined;
                ariaLabel?: string | undefined;
                error?: boolean | undefined;
                messages?: string | string[] | undefined;
                errorMessages?: string | string[] | undefined;
                errorCount?: string | number | undefined;
                rules?: ((v: any) => any)[] | undefined;
                success?: boolean | undefined;
                immediateValidation?: boolean | undefined;
                checkedIcon?: string | undefined;
                indeterminateValue?: string | number | boolean | unknown[] | Record<any, unknown> | null | undefined;
                indeterminateIcon?: string | undefined;
                id?: string | undefined;
                arrayValue?: string | number | boolean | Record<string, any> | undefined;
                leftLabel?: boolean | undefined;
                trueValue?: boolean | undefined;
                falseValue?: boolean | undefined;
            } | undefined;
            VaChip?: {
                replace?: boolean | undefined;
                flat?: boolean | undefined;
                preset?: string | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                target?: string | undefined;
                tag?: string | undefined;
                color?: string | undefined;
                size?: "small" | "medium" | "large" | undefined;
                icon?: string | undefined;
                closeable?: boolean | undefined;
                outline?: boolean | undefined;
                square?: boolean | undefined;
                disabled?: boolean | undefined;
                to?: string | Record<string, any> | undefined;
                append?: boolean | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                href?: string | undefined;
                shadow?: boolean | undefined;
            } | undefined;
            VaCollapse?: {
                header?: string | undefined;
                preset?: string | undefined;
                modelValue?: boolean | undefined;
                color?: string | undefined;
                textColor?: string | undefined;
                icon?: string | undefined;
                disabled?: boolean | undefined;
                solid?: boolean | undefined;
                colorAll?: boolean | undefined;
            } | undefined;
            VaColorIndicator?: {
                preset?: string | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                square?: boolean | undefined;
            } | undefined;
            VaColorInput?: {
                preset?: string | undefined;
                modelValue?: string | undefined;
                stateful?: boolean | undefined;
                disabled?: boolean | undefined;
                indicator?: "square" | "dot" | undefined;
            } | undefined;
            VaColorPalette?: {
                preset?: string | undefined;
                modelValue?: string | undefined;
                stateful?: boolean | undefined;
                indicator?: "square" | "dot" | undefined;
                palette?: string[] | undefined;
            } | undefined;
            VaConfig?: {
                components?: Record<string, any> | undefined;
                preset?: string | undefined;
            } | undefined;
            VaContent?: {} | undefined;
            VaCounter?: {
                readonly?: boolean | undefined;
                label?: string | undefined;
                flat?: boolean | undefined;
                preset?: string | undefined;
                modelValue?: string | number | undefined;
                stateful?: boolean | undefined;
                width?: string | number | undefined;
                color?: string | undefined;
                textColor?: string | undefined;
                outline?: boolean | undefined;
                disabled?: boolean | undefined;
                bordered?: boolean | undefined;
                messages?: string | string[] | undefined;
                max?: number | undefined;
                min?: number | undefined;
                step?: number | undefined;
                manualInput?: boolean | undefined;
                increaseIcon?: string | undefined;
                decreaseIcon?: string | undefined;
                buttons?: boolean | undefined;
                rounded?: boolean | undefined;
                margins?: string | number | undefined;
            } | undefined;
            VaDataTable?: {
                table?: boolean | undefined;
                filter?: string | undefined;
                preset?: string | undefined;
                readonly modelValue?: any[] | undefined;
                items?: import("../../components").DataTableItem[] | undefined;
                horizontal?: boolean | undefined;
                loading?: boolean | undefined;
                disabled?: boolean | undefined;
                readonly height?: string | number | undefined;
                bench?: number | undefined;
                itemSize?: string | number | undefined;
                wrapperSize?: string | number | undefined;
                trackBy?: string | number | ((item: any[] | Record<string, any>) => string | number) | undefined;
                columns?: (string | {
                    [x: string]: any;
                    key: string;
                    name?: string | undefined;
                    label?: string | undefined;
                    thTitle?: string | undefined;
                    sortable?: boolean | undefined;
                    sortingFn?: ((a: any, b: any) => number) | undefined;
                    sortingOptions?: import("../../components").DataTableSortingOrder[] | undefined;
                    thAlign?: import("../../components").DataTableAlignOptions | undefined;
                    thVerticalAlign?: import("../../components").DataTableVerticalAlignOptions | undefined;
                    tdAlign?: import("../../components").DataTableAlignOptions | undefined;
                    tdVerticalAlign?: import("../../components").DataTableVerticalAlignOptions | undefined;
                    width?: string | number | undefined;
                    thClass?: unknown;
                    tdClass?: unknown;
                    thStyle?: unknown;
                    tdStyle?: unknown;
                    headerTitle?: string | undefined;
                    alignHead?: import("../../components").DataTableAlignOptions | undefined;
                    verticalAlignHead?: import("../../components").DataTableVerticalAlignOptions | undefined;
                    align?: import("../../components").DataTableAlignOptions | undefined;
                    verticalAlign?: import("../../components").DataTableVerticalAlignOptions | undefined;
                    classes?: unknown;
                    headerClasses?: unknown;
                    style?: unknown;
                    headerStyle?: unknown;
                })[] | undefined;
                itemsTrackBy?: string | ((item: import("../../components").DataTableItem) => any) | undefined;
                readonly sortingOrder?: import("../../components").DataTableSortingOrder | undefined;
                readonly sortBy?: string | undefined;
                sortingOptions?: import("../../components").DataTableSortingOrder[] | undefined;
                readonly filterMethod?: import("../../components").DataTableFilterMethod | undefined;
                hoverable?: boolean | undefined;
                clickable?: boolean | undefined;
                animated?: boolean | undefined;
                selectable?: boolean | undefined;
                selectMode?: import("../../components").DataTableSelectMode | undefined;
                selectedColor?: string | undefined;
                readonly perPage?: number | undefined;
                readonly currentPage?: number | undefined;
                loadingColor?: string | undefined;
                noDataHtml?: string | undefined;
                noDataFilteredHtml?: string | undefined;
                hideDefaultHeader?: boolean | undefined;
                footerClone?: boolean | undefined;
                allowFooterSorting?: boolean | undefined;
                striped?: boolean | undefined;
                stickyHeader?: boolean | undefined;
                stickyFooter?: boolean | undefined;
                readonly rowBind?: import("../../components").DataTableRowBind | undefined;
                readonly cellBind?: import("../../components").DataTableCellBind | undefined;
                virtualScroller?: boolean | undefined;
                virtualTrackBy?: string | number | undefined;
                scrollTopMargin?: number | undefined;
                scrollBottomMargin?: number | undefined;
            } | undefined;
            VaDateInput?: {
                readonly?: boolean | undefined;
                label?: string | undefined;
                view?: {
                    type: import("../../components/va-date-picker/types").DatePickerViewType;
                    year: number;
                    month: number;
                } | undefined;
                type?: import("../../components/va-date-picker/types").DatePickerType | undefined;
                preset?: string | undefined;
                readonly modelValue?: string | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                })[] | {
                    start?: string | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number | undefined) => number;
                        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number | undefined) => number;
                        setUTCMonth: (month: number, date?: number | undefined) => number;
                        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | null | undefined;
                    end?: string | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number | undefined) => number;
                        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number | undefined) => number;
                        setUTCMonth: (month: number, date?: number | undefined) => number;
                        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | null | undefined;
                } | undefined;
                stateful?: boolean | undefined;
                target?: import("../../composables").MaybeHTMLElementOrSelector;
                color?: string | undefined;
                mode?: import("../../components/va-date-picker/types").DatePickerMode | undefined;
                textColor?: string | undefined;
                icon?: string | undefined;
                outline?: boolean | undefined;
                background?: string | undefined;
                counterValue?: number | undefined;
                disabled?: boolean | undefined;
                bordered?: boolean | undefined;
                leftIcon?: boolean | undefined;
                anchorSelector?: string | undefined;
                innerAnchorSelector?: string | undefined;
                preventOverflow?: boolean | undefined;
                keepAnchorWidth?: boolean | undefined;
                isContentHoverable?: boolean | undefined;
                closeOnContentClick?: boolean | undefined;
                closeOnClickOutside?: boolean | undefined;
                closeOnAnchorClick?: boolean | undefined;
                hoverOverTimeout?: number | undefined;
                hoverOutTimeout?: number | undefined;
                offset?: import("../../components/va-dropdown/types").DropdownOffsetProp | undefined;
                stickToEdges?: boolean | undefined;
                autoPlacement?: boolean | undefined;
                cursor?: boolean | undefined;
                trigger?: "none" | "click" | "right-click" | "hover" | "dblclick" | undefined;
                placement?: import("../../components").Placement | undefined;
                keyboardNavigation?: boolean | undefined;
                error?: boolean | undefined;
                messages?: string | string[] | undefined;
                errorMessages?: string | string[] | undefined;
                errorCount?: string | number | undefined;
                rules?: ((v: import("../../components/va-date-input/types").DateInputModelValue) => any)[] | undefined;
                success?: boolean | undefined;
                immediateValidation?: boolean | undefined;
                maxLength?: number | undefined;
                focused?: boolean | undefined;
                requiredMark?: boolean | undefined;
                clearable?: boolean | undefined;
                clearableIcon?: string | undefined;
                clearValue?: string | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                })[] | {
                    start?: string | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number | undefined) => number;
                        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number | undefined) => number;
                        setUTCMonth: (month: number, date?: number | undefined) => number;
                        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | null | undefined;
                    end?: string | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number | undefined) => number;
                        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number | undefined) => number;
                        setUTCMonth: (month: number, date?: number | undefined) => number;
                        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | null | undefined;
                } | undefined;
                manualInput?: boolean | undefined;
                highlightWeekend?: boolean | undefined;
                highlightToday?: boolean | undefined;
                monthNames?: string[] | undefined;
                weekdayNames?: string[] | undefined;
                firstWeekday?: "Monday" | "Sunday" | undefined;
                hideWeekDays?: boolean | undefined;
                showOtherMonths?: boolean | undefined;
                allowedDays?: ((date: Date) => boolean) | undefined;
                weekends?: ((date: Date) => boolean) | undefined;
                allowedMonths?: ((date: Date) => boolean) | undefined;
                allowedYears?: ((date: Date) => boolean) | undefined;
                startYear?: number | undefined;
                endYear?: number | undefined;
                weekendsColor?: string | undefined;
                resetOnClose?: boolean | undefined;
                isOpen?: boolean | undefined;
                readonly format?: ((date: import("../../components/va-date-input/types").DateInputModelValue) => string) | undefined;
                formatDate?: ((date: Date) => string) | undefined;
                readonly parse?: ((input: string) => import("../../components/va-date-input/types").DateInputValue) | undefined;
                readonly parseDate?: ((input: string) => Date) | undefined;
                readonly parseValue?: ((date: import("../../components/va-date-input/types").DateInputModelValue) => import("../../components/va-date-picker/types").DatePickerModelValue) | undefined;
                delimiter?: string | undefined;
                rangeDelimiter?: string | undefined;
            } | undefined;
            VaDatePicker?: {
                readonly?: boolean | undefined;
                readonly view?: {
                    type: import("../../components/va-date-picker/types").DatePickerViewType;
                    year: number;
                    month: number;
                } | undefined;
                type?: import("../../components/va-date-picker/types").DatePickerType | undefined;
                preset?: string | undefined;
                readonly modelValue?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                }[] | {
                    start?: {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number | undefined) => number;
                        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number | undefined) => number;
                        setUTCMonth: (month: number, date?: number | undefined) => number;
                        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | null | undefined;
                    end?: {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number | undefined) => number;
                        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number | undefined) => number;
                        setUTCMonth: (month: number, date?: number | undefined) => number;
                        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | null | undefined;
                } | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                mode?: import("../../components/va-date-picker/types").DatePickerMode | undefined;
                textColor?: string | undefined;
                disabled?: boolean | undefined;
                highlightWeekend?: boolean | undefined;
                highlightToday?: boolean | undefined;
                monthNames?: string[] | undefined;
                weekdayNames?: string[] | undefined;
                firstWeekday?: "Monday" | "Sunday" | undefined;
                hideWeekDays?: boolean | undefined;
                showOtherMonths?: boolean | undefined;
                allowedDays?: ((date: Date) => boolean) | undefined;
                weekends?: ((date: Date) => boolean) | undefined;
                allowedMonths?: ((date: Date) => boolean) | undefined;
                allowedYears?: ((date: Date) => boolean) | undefined;
                startYear?: number | undefined;
                endYear?: number | undefined;
                weekendsColor?: string | undefined;
            } | undefined;
            VaDivider?: {
                preset?: string | undefined;
                inset?: boolean | undefined;
                vertical?: boolean | undefined;
                orientation?: "right" | "left" | "center" | undefined;
                dashed?: boolean | undefined;
            } | undefined;
            VaDropdown?: {
                readonly?: boolean | undefined;
                preset?: string | undefined;
                readonly modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                target?: import("../../composables").MaybeHTMLElementOrSelector;
                disabled?: boolean | undefined;
                anchorSelector?: string | undefined;
                innerAnchorSelector?: string | undefined;
                preventOverflow?: boolean | undefined;
                keepAnchorWidth?: boolean | undefined;
                isContentHoverable?: boolean | undefined;
                closeOnContentClick?: boolean | undefined;
                closeOnClickOutside?: boolean | undefined;
                closeOnAnchorClick?: boolean | undefined;
                hoverOverTimeout?: number | undefined;
                hoverOutTimeout?: number | undefined;
                offset?: import("../../components/va-dropdown/types").DropdownOffsetProp | undefined;
                stickToEdges?: boolean | undefined;
                autoPlacement?: boolean | undefined;
                cursor?: boolean | undefined;
                trigger?: "none" | "click" | "right-click" | "hover" | "dblclick" | undefined;
                placement?: import("../../components").Placement | undefined;
                keyboardNavigation?: boolean | undefined;
            } | undefined;
            VaDropdownContent?: {
                readonly textColor?: string | undefined;
                background?: string | undefined;
                noPadding?: boolean | undefined;
            } | undefined;
            VaFileUpload?: {
                type?: "list" | "single" | "gallery" | undefined;
                preset?: string | undefined;
                modelValue?: {
                    url?: string | undefined;
                    readonly lastModified?: number | undefined;
                    readonly name?: string | undefined;
                    readonly webkitRelativePath?: string | undefined;
                    readonly size?: number | undefined;
                    readonly type?: string | undefined;
                    arrayBuffer?: (() => Promise<ArrayBuffer>) | undefined;
                    slice?: ((start?: number | undefined, end?: number | undefined, contentType?: string | undefined) => Blob) | undefined;
                    stream?: (() => ReadableStream<any>) | undefined;
                    text?: (() => Promise<string>) | undefined;
                } | {
                    url?: string | undefined;
                    readonly lastModified?: number | undefined;
                    readonly name?: string | undefined;
                    readonly webkitRelativePath?: string | undefined;
                    readonly size?: number | undefined;
                    readonly type?: string | undefined;
                    arrayBuffer?: (() => Promise<ArrayBuffer>) | undefined;
                    slice?: ((start?: number | undefined, end?: number | undefined, contentType?: string | undefined) => Blob) | undefined;
                    stream?: (() => ReadableStream<any>) | undefined;
                    text?: (() => Promise<string>) | undefined;
                }[] | undefined;
                color?: string | undefined;
                undo?: boolean | undefined;
                dropzone?: boolean | undefined;
                disabled?: boolean | undefined;
                undoDuration?: number | undefined;
                undoButtonText?: string | undefined;
                deletedFileMessage?: string | undefined;
                fileTypes?: string | undefined;
                hideFileList?: boolean | undefined;
                dropZoneText?: string | undefined;
                uploadButtonText?: string | undefined;
            } | undefined;
            VaForm?: {
                preset?: string | undefined;
                tag?: string | undefined;
                autofocus?: boolean | undefined;
            } | undefined;
            VaHover?: {
                preset?: string | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                disabled?: boolean | undefined;
            } | undefined;
            VaIcon?: {
                name?: string | undefined;
                preset?: string | undefined;
                readonly tag?: string | undefined;
                readonly component?: any;
                readonly color?: string | undefined;
                readonly rotation?: string | number | undefined;
                readonly spin?: string | boolean | undefined;
                flip?: "off" | "horizontal" | "vertical" | "both" | undefined;
                size?: string | number | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
            } | undefined;
            VaImage?: {
                preset?: string | undefined;
                readonly src: string;
                alt?: string | undefined;
                ratio?: number | undefined;
                contain?: boolean | undefined;
                draggable?: boolean | undefined;
            } | undefined;
            VaInfiniteScroll?: {
                reverse?: boolean | undefined;
                preset?: string | undefined;
                tag?: string | undefined;
                disabled?: boolean | undefined;
                offset?: number | undefined;
                readonly load: Function;
                scrollTarget?: string | HTMLElement | undefined;
                debounce?: number | undefined;
            } | undefined;
            VaInnerLoading?: {
                preset?: string | undefined;
                readonly color?: string | undefined;
                size?: number | undefined;
                icon?: string | undefined;
                loading?: boolean | undefined;
            } | undefined;
            VaInput?: {
                readonly?: boolean | undefined;
                label?: string | undefined;
                mask?: string | Record<string, number[]> | undefined;
                readonly pattern?: string | undefined;
                type?: import("../../types/string-with-autocomplete").StringWithAutocomplete<"textarea" | "text" | "password"> | undefined;
                preset?: string | undefined;
                modelValue?: string | number | undefined;
                color?: string | undefined;
                tabindex?: number | undefined;
                outline?: boolean | undefined;
                loading?: boolean | undefined;
                disabled?: boolean | undefined;
                bordered?: boolean | undefined;
                ariaLabel?: string | undefined;
                error?: boolean | undefined;
                messages?: string | string[] | undefined;
                errorMessages?: string | string[] | undefined;
                errorCount?: string | number | undefined;
                rules?: ((v: string) => any)[] | undefined;
                success?: boolean | undefined;
                immediateValidation?: boolean | undefined;
                maxLength?: number | undefined;
                requiredMark?: boolean | undefined;
                placeholder?: string | undefined;
                autosize?: boolean | undefined;
                minRows?: number | undefined;
                maxRows?: number | undefined;
                inputClass?: string | undefined;
                inputmode?: string | undefined;
                counter?: boolean | undefined;
                returnRaw?: boolean | undefined;
                clearable?: boolean | undefined;
                clearableIcon?: string | undefined;
                clearValue?: string | undefined;
            } | undefined;
            VaList?: {
                preset?: string | undefined;
                fit?: boolean | undefined;
            } | undefined;
            VaListItem?: {
                replace?: boolean | undefined;
                preset?: string | undefined;
                target?: string | undefined;
                tag?: string | undefined;
                disabled?: boolean | undefined;
                to?: string | Record<string, any> | undefined;
                append?: boolean | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                href?: string | undefined;
            } | undefined;
            VaListItemLabel?: {
                caption?: boolean | undefined;
                preset?: string | undefined;
                lines?: number | undefined;
            } | undefined;
            VaListItemSection?: {
                preset?: string | undefined;
                icon?: boolean | undefined;
                avatar?: boolean | undefined;
            } | undefined;
            VaListLabel?: {
                preset?: string | undefined;
                color?: string | undefined;
            } | undefined;
            VaListSeparator?: {
                preset?: string | undefined;
                fit?: boolean | undefined;
                spaced?: boolean | undefined;
            } | undefined;
            VaMessageList?: {
                modelValue?: string | string[] | undefined;
                readonly color?: string | undefined;
                limit?: number | undefined;
                hasError?: boolean | undefined;
            } | undefined;
            VaModal?: {
                title?: string | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                size?: "small" | "medium" | "large" | undefined;
                backgroundColor?: string | undefined;
                blur?: boolean | undefined;
                noPadding?: boolean | undefined;
                attachElement?: string | undefined;
                disableAttachment?: boolean | undefined;
                message?: string | undefined;
                okText?: string | undefined;
                cancelText?: string | undefined;
                hideDefaultActions?: boolean | undefined;
                fullscreen?: boolean | undefined;
                mobileFullscreen?: boolean | undefined;
                noDismiss?: boolean | undefined;
                noOutsideDismiss?: boolean | undefined;
                noEscDismiss?: boolean | undefined;
                maxWidth?: string | undefined;
                maxHeight?: string | undefined;
                readonly anchorClass?: string | undefined;
                fixedLayout?: boolean | undefined;
                withoutTransitions?: boolean | undefined;
                overlay?: boolean | undefined;
                overlayOpacity?: string | number | undefined;
                zIndex?: string | number | undefined;
            } | undefined;
            VaNavbar?: {
                fixed?: boolean | undefined;
                preset?: string | undefined;
                bottom?: boolean | undefined;
                color?: string | undefined;
                readonly textColor?: string | undefined;
                hideOnScroll?: boolean | undefined;
                shape?: boolean | undefined;
            } | undefined;
            VaNavbarItem?: {} | undefined;
            VaOptionList?: {
                readonly?: boolean | undefined;
                name?: string | undefined;
                type?: "switch" | "checkbox" | "radio" | undefined;
                preset?: string | undefined;
                readonly modelValue?: import("../../components").SelectOption | import("../../components").SelectOption[] | null | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                disabled?: boolean | undefined;
                options?: import("../../components").SelectOption[] | undefined;
                error?: boolean | undefined;
                messages?: string | string[] | undefined;
                errorMessages?: string | string[] | undefined;
                errorCount?: string | number | undefined;
                rules?: ((v: any) => any)[] | undefined;
                success?: boolean | undefined;
                immediateValidation?: boolean | undefined;
                leftLabel?: boolean | undefined;
                trackBy?: (string | ((option: import("../../components").SelectOption) => unknown)) | undefined;
                readonly defaultValue?: import("../../components").SelectOption | import("../../components").SelectOption[] | null | undefined;
                textBy?: (string | ((option: import("../../components").SelectOption) => unknown)) | undefined;
                valueBy?: (string | ((option: import("../../components").SelectOption) => unknown)) | undefined;
                disabledBy?: (string | ((option: import("../../components").SelectOption) => unknown)) | undefined;
                groupBy?: (string | ((option: import("../../components").SelectOption) => unknown)) | undefined;
            } | undefined;
            VaPagination?: {
                input?: boolean | undefined;
                preset?: string | undefined;
                modelValue?: number | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                size?: "small" | "medium" | "large" | undefined;
                borderColor?: string | undefined;
                disabled?: boolean | undefined;
                rounded?: boolean | undefined;
                visiblePages?: number | undefined;
                pages?: number | undefined;
                boundaryLinks?: boolean | undefined;
                boundaryNumbers?: boolean | undefined;
                directionLinks?: boolean | undefined;
                hideOnSinglePage?: boolean | undefined;
                total?: number | undefined;
                pageSize?: number | undefined;
                boundaryIconLeft?: string | undefined;
                boundaryIconRight?: string | undefined;
                directionIconLeft?: string | undefined;
                directionIconRight?: string | undefined;
                gapped?: boolean | undefined;
                activePageColor?: string | undefined;
                buttonsPreset?: string | undefined;
            } | undefined;
            VaParallax?: {
                preset?: string | undefined;
                readonly target?: string | HTMLElement | undefined;
                src?: string | undefined;
                alt?: string | undefined;
                speed?: number | undefined;
                height?: number | undefined;
                reversed?: boolean | undefined;
            } | undefined;
            VaPopover?: {
                readonly?: boolean | undefined;
                title?: string | undefined;
                preset?: string | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                target?: import("../../composables").MaybeHTMLElementOrSelector;
                color?: string | undefined;
                readonly textColor?: string | undefined;
                icon?: string | undefined;
                disabled?: boolean | undefined;
                anchorSelector?: string | undefined;
                innerAnchorSelector?: string | undefined;
                preventOverflow?: boolean | undefined;
                keepAnchorWidth?: boolean | undefined;
                isContentHoverable?: boolean | undefined;
                closeOnContentClick?: boolean | undefined;
                closeOnClickOutside?: boolean | undefined;
                closeOnAnchorClick?: boolean | undefined;
                hoverOverTimeout?: number | undefined;
                hoverOutTimeout?: number | undefined;
                offset?: number | [number, number] | undefined;
                stickToEdges?: boolean | undefined;
                autoPlacement?: boolean | undefined;
                cursor?: boolean | undefined;
                trigger?: string | undefined;
                placement?: import("../../components").Placement | undefined;
                keyboardNavigation?: boolean | undefined;
                message?: string | undefined;
                autoHide?: boolean | undefined;
            } | undefined;
            VaProgressBar?: {
                reverse?: boolean | undefined;
                preset?: string | undefined;
                modelValue?: number | undefined;
                color?: string | undefined;
                size?: number | "small" | "medium" | "large" | undefined;
                indeterminate?: boolean | undefined;
                rounded?: boolean | undefined;
                buffer?: number | undefined;
                contentInside?: boolean | undefined;
                showPercent?: boolean | undefined;
            } | undefined;
            VaProgressCircle?: {
                preset?: string | undefined;
                modelValue?: number | undefined;
                color?: string | undefined;
                size?: string | number | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                indeterminate?: boolean | undefined;
                thickness?: number | undefined;
            } | undefined;
            VaRadio?: {
                readonly?: boolean | undefined;
                label?: string | undefined;
                option?: any;
                name?: string | undefined;
                preset?: string | undefined;
                modelValue?: string | number | boolean | unknown[] | Record<any, unknown> | null | undefined;
                color?: string | undefined;
                tabindex?: number | undefined;
                disabled?: boolean | undefined;
                leftLabel?: boolean | undefined;
            } | undefined;
            VaRating?: {
                readonly?: boolean | undefined;
                preset?: string | undefined;
                modelValue?: number | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                size?: string | number | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                tabindex?: number | undefined;
                icon?: string | undefined;
                disabled?: boolean | undefined;
                hover?: boolean | undefined;
                clearable?: boolean | undefined;
                max?: number | undefined;
                halfIcon?: string | undefined;
                emptyIcon?: string | undefined;
                halves?: boolean | undefined;
                unselectedColor?: string | undefined;
                itemNumber?: number | undefined;
                numbers?: boolean | undefined;
                texts?: string[] | undefined;
            } | undefined;
            VaSelect?: {
                readonly?: boolean | undefined;
                label?: string | undefined;
                preset?: string | undefined;
                modelValue?: import("../../components").SelectOption | import("../../components").SelectOption[] | undefined;
                multiple?: boolean | undefined;
                stateful?: boolean | undefined;
                target?: import("../../composables").MaybeHTMLElementOrSelector;
                width?: string | undefined;
                color?: string | undefined;
                tabindex?: number | undefined;
                outline?: boolean | undefined;
                loading?: boolean | undefined;
                disabled?: boolean | undefined;
                bordered?: boolean | undefined;
                separator?: string | undefined;
                anchorSelector?: string | undefined;
                innerAnchorSelector?: string | undefined;
                preventOverflow?: boolean | undefined;
                keepAnchorWidth?: boolean | undefined;
                isContentHoverable?: boolean | undefined;
                closeOnContentClick?: boolean | undefined;
                closeOnClickOutside?: boolean | undefined;
                closeOnAnchorClick?: boolean | undefined;
                hoverOverTimeout?: number | undefined;
                hoverOutTimeout?: number | undefined;
                offset?: import("../../components/va-dropdown/types").DropdownOffsetProp | undefined;
                stickToEdges?: boolean | undefined;
                autoPlacement?: boolean | undefined;
                cursor?: boolean | undefined;
                trigger?: "none" | "click" | "right-click" | "hover" | "dblclick" | undefined;
                placement?: import("../../components").Placement | undefined;
                keyboardNavigation?: boolean | undefined;
                options?: import("../../components").SelectOption[] | undefined;
                error?: boolean | undefined;
                messages?: string | string[] | undefined;
                errorMessages?: string | string[] | undefined;
                errorCount?: string | number | undefined;
                rules?: ((v: import("../../components").SelectOption) => any)[] | undefined;
                success?: boolean | undefined;
                immediateValidation?: boolean | undefined;
                requiredMark?: boolean | undefined;
                placeholder?: string | undefined;
                clearable?: boolean | undefined;
                clearableIcon?: string | undefined;
                clearValue?: string | undefined;
                trackBy?: (string | ((option: import("../../components").SelectOption) => unknown)) | undefined;
                virtualScroller?: boolean | undefined;
                maxHeight?: string | undefined;
                textBy?: (string | ((option: import("../../components").SelectOption) => unknown)) | undefined;
                valueBy?: (string | ((option: import("../../components").SelectOption) => unknown)) | undefined;
                disabledBy?: (string | ((option: import("../../components").SelectOption) => unknown)) | undefined;
                groupBy?: (string | ((option: import("../../components").SelectOption) => unknown)) | undefined;
                noOptionsText?: string | undefined;
                allowCreate?: boolean | "unique" | undefined;
                searchable?: boolean | undefined;
                hideSelected?: boolean | undefined;
                dropdownIcon?: string | {
                    open: string;
                    close: string;
                } | undefined;
                searchPlaceholderText?: string | undefined;
                maxSelections?: string | number | undefined;
            } | undefined;
            VaSeparator?: {} | undefined;
            VaSidebar?: {
                preset?: string | undefined;
                modelValue?: boolean | undefined;
                width?: string | undefined;
                color?: string | undefined;
                readonly textColor?: string | undefined;
                borderColor?: string | undefined;
                gradient?: boolean | undefined;
                activeColor?: string | undefined;
                hoverable?: boolean | undefined;
                animated?: boolean | undefined;
                position?: "right" | "left" | undefined;
                hoverColor?: string | undefined;
                minimized?: boolean | undefined;
                minimizedWidth?: string | undefined;
            } | undefined;
            VaSidebarItem?: {
                replace?: boolean | undefined;
                preset?: string | undefined;
                target?: string | undefined;
                tag?: string | undefined;
                textColor?: string | undefined;
                borderColor?: string | undefined;
                disabled?: boolean | undefined;
                to?: string | Record<string, any> | undefined;
                append?: boolean | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                href?: string | undefined;
                activeColor?: string | undefined;
                active?: boolean | undefined;
                hoverColor?: string | undefined;
            } | undefined;
            VaSidebarItemContent?: {} | undefined;
            VaSidebarItemTitle?: {} | undefined;
            VaSlider?: {
                readonly?: boolean | undefined;
                label?: string | undefined;
                preset?: string | undefined;
                modelValue?: number | number[] | undefined;
                vertical?: boolean | undefined;
                color?: string | undefined;
                disabled?: boolean | undefined;
                max?: number | undefined;
                min?: number | undefined;
                step?: number | undefined;
                range?: boolean | undefined;
                readonly trackLabel?: string | ((val: number, order?: number | undefined) => string) | undefined;
                trackColor?: string | undefined;
                labelColor?: string | undefined;
                trackLabelVisible?: boolean | undefined;
                invertLabel?: boolean | undefined;
                pins?: boolean | undefined;
                iconPrepend?: string | undefined;
                iconAppend?: string | undefined;
                showTrack?: boolean | undefined;
            } | undefined;
            VaSpacer?: {} | undefined;
            VaSplit?: {
                preset?: string | undefined;
                modelValue?: number | undefined;
                stateful?: boolean | undefined;
                vertical?: boolean | undefined;
                disabled?: boolean | undefined;
                maximization?: boolean | undefined;
                maximizeStart?: boolean | undefined;
                limits?: [import("../../components/va-split/types").SplitLimit, import("../../components/va-split/types").SplitLimit] | undefined;
                snapping?: import("../../components/va-split/types").SnappingMark[] | undefined;
                snappingRange?: string | number | undefined;
            } | undefined;
            VaSwitch?: {
                readonly?: boolean | undefined;
                label?: string | undefined;
                name?: string | undefined;
                preset?: string | undefined;
                modelValue?: string | number | boolean | unknown[] | Record<string, unknown> | null | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                size?: "small" | "medium" | "large" | undefined;
                indeterminate?: boolean | undefined;
                loading?: boolean | undefined;
                disabled?: boolean | undefined;
                error?: boolean | undefined;
                messages?: string | string[] | undefined;
                errorMessages?: string | string[] | undefined;
                errorCount?: string | number | undefined;
                rules?: ((v: any) => any)[] | undefined;
                success?: boolean | undefined;
                immediateValidation?: boolean | undefined;
                indeterminateValue?: null | undefined;
                id?: string | undefined;
                arrayValue?: string | number | boolean | Record<string, any> | undefined;
                leftLabel?: boolean | undefined;
                trueValue?: boolean | undefined;
                falseValue?: boolean | undefined;
                trueLabel?: string | undefined;
                falseLabel?: string | undefined;
                trueInnerLabel?: string | undefined;
                falseInnerLabel?: string | undefined;
                offColor?: string | undefined;
            } | undefined;
            VaTabs?: {
                preset?: string | undefined;
                modelValue?: string | number | undefined;
                stateful?: boolean | undefined;
                vertical?: boolean | undefined;
                color?: string | undefined;
                right?: boolean | undefined;
                left?: boolean | undefined;
                center?: boolean | undefined;
                disabled?: boolean | undefined;
                grow?: boolean | undefined;
                hideSlider?: boolean | undefined;
                prevIcon?: string | undefined;
                nextIcon?: string | undefined;
            } | undefined;
            VaTab?: {
                replace?: boolean | undefined;
                label?: string | undefined;
                readonly name?: string | number | undefined;
                preset?: string | undefined;
                target?: string | undefined;
                tag?: string | undefined;
                color?: string | undefined;
                icon?: string | undefined;
                disabled?: boolean | undefined;
                to?: string | Record<string, any> | undefined;
                append?: boolean | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                href?: string | undefined;
                selected?: boolean | undefined;
            } | undefined;
            VaTimeInput?: {
                readonly?: boolean | undefined;
                label?: string | undefined;
                view?: "hours" | "minutes" | "seconds" | undefined;
                preset?: string | undefined;
                modelValue?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | undefined;
                stateful?: boolean | undefined;
                target?: import("../../composables").MaybeHTMLElementOrSelector;
                color?: string | undefined;
                icon?: string | undefined;
                outline?: boolean | undefined;
                background?: string | undefined;
                counterValue?: number | undefined;
                disabled?: boolean | undefined;
                bordered?: boolean | undefined;
                leftIcon?: boolean | undefined;
                anchorSelector?: string | undefined;
                innerAnchorSelector?: string | undefined;
                preventOverflow?: boolean | undefined;
                keepAnchorWidth?: boolean | undefined;
                isContentHoverable?: boolean | undefined;
                closeOnContentClick?: boolean | undefined;
                closeOnClickOutside?: boolean | undefined;
                closeOnAnchorClick?: boolean | undefined;
                hoverOverTimeout?: number | undefined;
                hoverOutTimeout?: number | undefined;
                offset?: import("../../components/va-dropdown/types").DropdownOffsetProp | undefined;
                stickToEdges?: boolean | undefined;
                autoPlacement?: boolean | undefined;
                cursor?: boolean | undefined;
                trigger?: "none" | "click" | "right-click" | "hover" | "dblclick" | undefined;
                placement?: import("../../components").Placement | undefined;
                keyboardNavigation?: boolean | undefined;
                error?: boolean | undefined;
                messages?: string | string[] | undefined;
                errorMessages?: string | string[] | undefined;
                errorCount?: string | number | undefined;
                rules?: ((v: Date) => any)[] | undefined;
                success?: boolean | undefined;
                immediateValidation?: boolean | undefined;
                maxLength?: number | undefined;
                focused?: boolean | undefined;
                requiredMark?: boolean | undefined;
                clearable?: boolean | undefined;
                clearableIcon?: string | undefined;
                clearValue?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | undefined;
                manualInput?: boolean | undefined;
                isOpen?: boolean | undefined;
                readonly format?: ((date?: Date | undefined) => string) | undefined;
                readonly parse?: ((input: string) => Date) | undefined;
                cellHeight?: number | undefined;
                ampm?: boolean | undefined;
                hidePeriodSwitch?: boolean | undefined;
                periodUpdatesModelValue?: boolean | undefined;
                hoursFilter?: ((h: number) => boolean) | undefined;
                minutesFilter?: ((h: number) => boolean) | undefined;
                secondsFilter?: ((h: number) => boolean) | undefined;
                framed?: boolean | undefined;
                visibleCellsCount?: number | undefined;
            } | undefined;
            VaTimeline?: {} | undefined;
            VaTimelineItem?: {
                preset?: string | undefined;
                vertical?: boolean | undefined;
                color?: string | undefined;
                active?: boolean | undefined;
                activePrevious?: boolean | undefined;
                activeNext?: boolean | undefined;
                isFirst?: boolean | undefined;
                isLast?: boolean | undefined;
                inverted?: boolean | undefined;
            } | undefined;
            VaTimePicker?: {
                readonly?: boolean | undefined;
                view?: "hours" | "minutes" | "seconds" | undefined;
                preset?: string | undefined;
                readonly modelValue?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | undefined;
                stateful?: boolean | undefined;
                disabled?: boolean | undefined;
                cellHeight?: number | undefined;
                ampm?: boolean | undefined;
                hidePeriodSwitch?: boolean | undefined;
                periodUpdatesModelValue?: boolean | undefined;
                readonly hoursFilter?: ((h: number) => boolean) | undefined;
                readonly minutesFilter?: ((h: number) => boolean) | undefined;
                readonly secondsFilter?: ((h: number) => boolean) | undefined;
                framed?: boolean | undefined;
                visibleCellsCount?: number | undefined;
            } | undefined;
            VaTreeNode?: {
                readonly node: {
                    [x: string]: any;
                    id: string | number;
                    children: any[];
                    level: number;
                    checked: boolean | null;
                    disabled: boolean;
                    expanded: boolean;
                    hasChildren: boolean;
                    matchesFilter: boolean;
                    indeterminate: boolean;
                };
            } | undefined;
            VaTreeView?: {
                filter?: string | undefined;
                stateful?: boolean | undefined;
                color?: string | undefined;
                expanded?: (string | number | {
                    [x: string]: any;
                    id: string | number;
                    children: any[];
                    level: number;
                    checked: boolean | null;
                    disabled: boolean;
                    expanded: boolean;
                    hasChildren: boolean;
                    matchesFilter: boolean;
                    indeterminate: boolean;
                })[] | undefined;
                checked?: (string | number | {
                    [x: string]: any;
                    id: string | number;
                    children: any[];
                    level: number;
                    checked: boolean | null;
                    disabled: boolean;
                    expanded: boolean;
                    hasChildren: boolean;
                    matchesFilter: boolean;
                    indeterminate: boolean;
                })[] | undefined;
                trackBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                filterMethod?: import("../../components/va-tree-view/types").TreeViewFilterMethod | undefined;
                selectable?: boolean | undefined;
                textBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                valueBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                disabledBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                iconBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                nodes?: {
                    [x: string]: any;
                    id: string | number;
                    children: any[];
                    level: number;
                    checked: boolean | null;
                    disabled: boolean;
                    expanded: boolean;
                    hasChildren: boolean;
                    matchesFilter: boolean;
                    indeterminate: boolean;
                }[] | undefined;
                selectionType?: string | undefined;
                expandedBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                checkedBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                expandAll?: boolean | undefined;
            } | undefined;
            VaScrollContainer?: {
                horizontal?: boolean | undefined;
                vertical?: boolean | undefined;
                color?: string | undefined;
                size?: "default" | "none" | "thin" | undefined;
            } | undefined;
            VaVirtualScroller?: {
                table?: boolean | undefined;
                items?: unknown[] | undefined;
                horizontal?: boolean | undefined;
                disabled?: boolean | undefined;
                bench?: number | undefined;
                itemSize?: string | number | undefined;
                wrapperSize?: string | number | undefined;
                trackBy?: string | number | ((item: any[] | Record<string, any>) => string | number) | undefined;
            } | undefined;
            all?: import("../component-config/component-config").Props | undefined;
            presets?: {
                VaAccordion?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaAffix?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaAlert?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaAppBar?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaAvatar?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaBacktop?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaBadge?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaBreadcrumbs?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaBreadcrumbsItem?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaButton?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaButtonDropdown?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaButtonGroup?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaButtonToggle?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaCard?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaCardActions?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaCardContent?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaCardTitle?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaCarousel?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaCheckbox?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaChip?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaCollapse?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaColorIndicator?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaColorInput?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaColorPalette?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaConfig?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaContent?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaCounter?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaDataTable?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaDateInput?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaDatePicker?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaDivider?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaDropdown?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaDropdownContent?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaFileUpload?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaForm?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaHover?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaIcon?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaImage?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaInfiniteScroll?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaInnerLoading?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaInput?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaList?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaListItem?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaListItemLabel?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaListItemSection?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaListLabel?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaListSeparator?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaMessageList?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaModal?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaNavbar?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaNavbarItem?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaOptionList?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaPagination?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaParallax?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaPopover?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaProgressBar?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaProgressCircle?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaRadio?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaRating?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaSelect?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaSeparator?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaSidebar?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaSidebarItem?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaSidebarItemContent?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaSidebarItemTitle?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaSlider?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaSpacer?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaSplit?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaSwitch?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaTabs?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaTab?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaTimeInput?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaTimeline?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaTimelineItem?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaTimePicker?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaTreeNode?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaTreeView?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaScrollContainer?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
                VaVirtualScroller?: {
                    [presetName: string]: import("../component-config/component-config").Props;
                } | undefined;
            } | undefined;
        };
        breakpoint: {
            enabled: boolean;
            bodyClass: boolean;
            thresholds: {
                sm: number;
                md: number;
                lg: number;
                xs: number;
                xl: number;
            };
        };
        i18n: {
            search: string;
            noOptions: string;
            ok: string;
            cancel: string;
            uploadFile: string;
            undo: string;
            dropzone: string;
            fileDeleted: string;
            closeAlert: string;
            backToTop: string;
            toggleDropdown: string;
            carousel: string;
            goPreviousSlide: string;
            goNextSlide: string;
            goSlide: string;
            slideOf: string;
            close: string;
            openColorPicker: string;
            colorSelection: string;
            colorName: string;
            decreaseCounter: string;
            increaseCounter: string;
            selectAllRows: string;
            sortColumnBy: string;
            selectRowByIndex: string;
            resetDate: string;
            nextPeriod: string;
            switchView: string;
            previousPeriod: string;
            removeFile: string;
            reset: string;
            pagination: string;
            goToTheFirstPage: string;
            goToPreviousPage: string;
            goToSpecificPage: string;
            goToSpecificPageInput: string;
            goNextPage: string;
            goLastPage: string;
            currentRating: string;
            voteRating: string;
            optionsFilter: string;
            splitPanels: string;
            movePaginationLeft: string;
            movePaginationRight: string;
            resetTime: string;
            closeToast: string;
            selectedOption: string;
            noSelectedOption: string;
            breadcrumbs: string;
            counterValue: string;
            selectedDate: string;
            selectedTime: string;
            progressState: string;
            color: string;
        };
    }>;
};
/** Use this function if you don't want to throw error if hook used outside setup function by useGlobalConfig */
export declare function useGlobalConfigSafe(): ProvidedGlobalConfig | undefined;
export declare function useGlobalConfig(): ProvidedGlobalConfig;
export * from './types';
