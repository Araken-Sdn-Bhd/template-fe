export declare const sleep: (ms?: number) => Promise<unknown>;
export declare const deepEqual: (a: any, b: any) => any;
export declare const warn: (...attrs: any[]) => boolean;
export declare const hasOwnProperty: (object: any, key: any) => boolean;
export declare const getNestedValue: (option: any, propsArray: any) => any;
/**
 * Finds value in the object using string with dots 'key.key.key'
 *
 * @param option
 * @param prop
 */
export declare const getValueByPath: <T extends Record<string, unknown>>(option: T, prop: string | keyof T) => any;
/**
 * Finds value of nested property inside an object.
 *
 * @param option - Object to look properties inside.
 * @param prop - String or function used to find nested property.
 */
export declare const getValueByKey: <T extends Record<string, unknown>>(option: T, prop: string | ((option: T) => any)) => any;
export declare const generateUniqueId: () => string;
export declare const isParsableMeasure: (value: unknown) => boolean;
export declare const isParsablePositiveMeasure: (value: unknown) => boolean;
/**
 * @description checks if empty slot was passed
 * @param v - any slot
 * @param initial - flag for initial function call
 * @example checkSlotChildrenDeep(slots.default)
 */
export declare const checkSlotChildrenDeep: (v: any, initial?: boolean) => boolean;
