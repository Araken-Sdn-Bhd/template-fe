export declare const VaPopover: import("vue").DefineComponent<{
    trigger: {
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    message: {
        type: StringConstructor;
        default: string;
    };
    autoHide: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        type: import("vue").PropType<number | [number, number]>;
        default: number;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    readonly: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    anchorSelector: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    innerAnchorSelector: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    preventOverflow: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    keepAnchorWidth: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    isContentHoverable: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    closeOnContentClick: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    closeOnClickOutside: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    hoverOverTimeout: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    hoverOutTimeout: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    stickToEdges: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    autoPlacement: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    cursor: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    placement: {
        type: import("vue").PropType<import("..").Placement>;
        required: true;
        default: import("..").Placement;
    };
    keyboardNavigation: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<boolean | undefined>;
        required: false;
        default: undefined;
    };
    target: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        required: false;
        default: undefined;
    };
}, {
    textColorComputed: import("vue").ComputedRef<string>;
    VaDropdownPropValues: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        [x: string & `on${string}`]: {
            type: import("vue").PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        readonly: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        anchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string;
        };
        innerAnchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string;
        };
        preventOverflow: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        keepAnchorWidth: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        isContentHoverable: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        closeOnContentClick: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        closeOnClickOutside: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        closeOnAnchorClick: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        hoverOverTimeout: {
            type: import("vue").PropType<number>;
            required: true;
            default: number;
        };
        hoverOutTimeout: {
            type: import("vue").PropType<number>;
            required: true;
            default: number;
        };
        offset: {
            type: import("vue").PropType<import("../va-dropdown/types").DropdownOffsetProp>;
            required: true;
            default: import("../va-dropdown/types").DropdownOffsetProp;
        };
        stickToEdges: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        autoPlacement: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        cursor: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        trigger: {
            type: import("vue").PropType<"none" | "click" | "right-click" | "hover" | "dblclick">;
            required: true;
            default: "none" | "click" | "right-click" | "hover" | "dblclick";
        };
        placement: {
            type: import("vue").PropType<import("..").Placement>;
            required: true;
            default: import("..").Placement;
        };
        keyboardNavigation: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        preset: {
            type: import("vue").PropType<string | undefined>;
            required: false;
            default: undefined;
        };
        modelValue: {
            type: import("vue").PropType<boolean | undefined>;
            required: false;
            default: undefined;
        };
        target: {
            type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
            required: false;
            default: undefined;
        };
    }>>;
    showBodyComputed: import("vue").ComputedRef<string | import("vue").Slot | undefined>;
    showIconComputed: import("vue").ComputedRef<string | import("vue").Slot | undefined>;
    showTitleComputed: import("vue").ComputedRef<string | import("vue").Slot | undefined>;
    computedPopoverStyle: import("vue").ComputedRef<{
        boxShadow: string;
        backgroundColor: string;
        color: string;
    }>;
    showPopoverContentComputed: import("vue").ComputedRef<string | import("vue").Slot | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    trigger: {
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    message: {
        type: StringConstructor;
        default: string;
    };
    autoHide: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        type: import("vue").PropType<number | [number, number]>;
        default: number;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    readonly: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    anchorSelector: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    innerAnchorSelector: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    preventOverflow: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    keepAnchorWidth: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    isContentHoverable: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    closeOnContentClick: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    closeOnClickOutside: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    hoverOverTimeout: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    hoverOutTimeout: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    stickToEdges: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    autoPlacement: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    cursor: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    placement: {
        type: import("vue").PropType<import("..").Placement>;
        required: true;
        default: import("..").Placement;
    };
    keyboardNavigation: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<boolean | undefined>;
        required: false;
        default: undefined;
    };
    target: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        required: false;
        default: undefined;
    };
}>>, {
    readonly: boolean;
    title: string;
    preset: string;
    modelValue: boolean | undefined;
    stateful: boolean;
    target: import("../../composables").MaybeHTMLElementOrSelector;
    color: string;
    icon: string;
    disabled: boolean;
    anchorSelector: string;
    innerAnchorSelector: string;
    preventOverflow: boolean;
    keepAnchorWidth: boolean;
    isContentHoverable: boolean;
    closeOnContentClick: boolean;
    closeOnClickOutside: boolean;
    closeOnAnchorClick: boolean;
    hoverOverTimeout: number;
    hoverOutTimeout: number;
    offset: number | [number, number];
    stickToEdges: boolean;
    autoPlacement: boolean;
    cursor: boolean;
    trigger: string;
    placement: import("..").Placement;
    keyboardNavigation: boolean;
    message: string;
    autoHide: boolean;
}>;
