export declare const VaTimeInput: import("vue").DefineComponent<{
    isOpen: {
        type: BooleanConstructor;
        default: undefined;
    };
    modelValue: {
        type: DateConstructor;
        default: undefined;
    };
    clearValue: {
        type: DateConstructor;
        default: undefined;
    };
    format: {
        type: import("vue").PropType<(date?: Date | undefined) => string>;
    };
    parse: {
        type: import("vue").PropType<(input: string) => Date>;
    };
    manualInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: import("vue").PropType<((v: any) => any)[]>;
        default: () => any;
    } & {
        type: import("vue").PropType<((v: Date) => any)[]>;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    view: {
        type: import("vue").PropType<"hours" | "minutes" | "seconds">;
        required: true;
        default: "hours" | "minutes" | "seconds";
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    cellHeight: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    ampm: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    hidePeriodSwitch: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    periodUpdatesModelValue: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    framed: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    visibleCellsCount: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    preset: {
        type: import("vue").PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    hoursFilter: {
        type: import("vue").PropType<((h: number) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    minutesFilter: {
        type: import("vue").PropType<((h: number) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    secondsFilter: {
        type: import("vue").PropType<((h: number) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    label: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    color: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    outline: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    background: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    bordered: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    focused: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    requiredMark: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    counterValue: {
        type: import("vue").PropType<number | undefined>;
        required: false;
        default: undefined;
    };
    maxLength: {
        type: import("vue").PropType<number | undefined>;
        required: false;
        default: undefined;
    };
    onClick: {
        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick-prepend": {
        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick-append": {
        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick-prepend-inner": {
        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick-append-inner": {
        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    anchorSelector: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    innerAnchorSelector: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    preventOverflow: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    keepAnchorWidth: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    isContentHoverable: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    closeOnContentClick: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    closeOnClickOutside: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    hoverOverTimeout: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    hoverOutTimeout: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    offset: {
        type: import("vue").PropType<import("../va-dropdown/types").DropdownOffsetProp>;
        required: true;
        default: import("../va-dropdown/types").DropdownOffsetProp;
    };
    stickToEdges: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    autoPlacement: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    cursor: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    trigger: {
        type: import("vue").PropType<"none" | "click" | "right-click" | "hover" | "dblclick">;
        required: true;
        default: "none" | "click" | "right-click" | "hover" | "dblclick";
    };
    placement: {
        type: import("vue").PropType<import("..").Placement>;
        required: true;
        default: import("..").Placement;
    };
    keyboardNavigation: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    target: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        required: false;
        default: undefined;
    };
}, {
    t: (key: string, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
    input: import("vue").ShallowRef<HTMLInputElement | undefined>;
    timePicker: import("vue").ShallowRef<import("vue").DefineComponent<{
        modelValue: {
            type: DateConstructor;
            required: false;
        };
        ampm: {
            type: BooleanConstructor;
            default: boolean;
        };
        hidePeriodSwitch: {
            type: BooleanConstructor;
            default: boolean;
        };
        periodUpdatesModelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        view: {
            type: import("vue").PropType<"hours" | "minutes" | "seconds">;
            default: string;
        };
        hoursFilter: {
            type: import("vue").PropType<(h: number) => boolean>;
        };
        minutesFilter: {
            type: import("vue").PropType<(h: number) => boolean>;
        };
        secondsFilter: {
            type: import("vue").PropType<(h: number) => boolean>;
        };
        framed: {
            type: BooleanConstructor;
            default: boolean;
        };
        cellHeight: {
            type: NumberConstructor;
            default: number;
        };
        visibleCellsCount: {
            type: NumberConstructor;
            default: number;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }, {
        columns: import("vue").ComputedRef<({
            items: number[];
            activeItem: import("vue").WritableComputedRef<number>;
        } | {
            items: string[];
            activeItem: import("vue").WritableComputedRef<number>;
        })[]>;
        computedStyles: import("vue").ComputedRef<{
            [x: string]: string;
        }[]>;
        computedClasses: import("vue").ComputedRef<{
            'va-time-picker--framed': boolean;
            asObject: import("vue").ComputedRef<{
                [x: `va-time-picker--${string}`]: boolean;
            }>;
            asArray: import("vue").ComputedRef<`va-time-picker--${string}`[]>;
            asString: import("vue").ComputedRef<string>;
        }>;
        isPM: import("vue").Ref<boolean>;
        pickers: import("vue").ShallowRef<import("../../composables").TemplateRef[]>;
        setItemRef: (el: any) => void;
        focusNext: () => void;
        focusPrev: () => void;
        activeColumnIndex: import("vue").Ref<number | undefined>;
        focus: (idx?: number) => void;
        blur: (idx?: number | undefined) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: DateConstructor;
            required: false;
        };
        ampm: {
            type: BooleanConstructor;
            default: boolean;
        };
        hidePeriodSwitch: {
            type: BooleanConstructor;
            default: boolean;
        };
        periodUpdatesModelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        view: {
            type: import("vue").PropType<"hours" | "minutes" | "seconds">;
            default: string;
        };
        hoursFilter: {
            type: import("vue").PropType<(h: number) => boolean>;
        };
        minutesFilter: {
            type: import("vue").PropType<(h: number) => boolean>;
        };
        secondsFilter: {
            type: import("vue").PropType<(h: number) => boolean>;
        };
        framed: {
            type: BooleanConstructor;
            default: boolean;
        };
        cellHeight: {
            type: NumberConstructor;
            default: number;
        };
        visibleCellsCount: {
            type: NumberConstructor;
            default: number;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
    }, {
        readonly: boolean;
        view: "hours" | "minutes" | "seconds";
        preset: string;
        stateful: boolean;
        disabled: boolean;
        cellHeight: number;
        ampm: boolean;
        hidePeriodSwitch: boolean;
        periodUpdatesModelValue: boolean;
        framed: boolean;
        visibleCellsCount: number;
    }> | undefined>;
    timePickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        [x: string & `on${string}`]: {
            type: import("vue").PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        readonly: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        view: {
            type: import("vue").PropType<"hours" | "minutes" | "seconds">;
            required: true;
            default: "hours" | "minutes" | "seconds";
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        cellHeight: {
            type: import("vue").PropType<number>;
            required: true;
            default: number;
        };
        ampm: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        hidePeriodSwitch: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        periodUpdatesModelValue: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        framed: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        visibleCellsCount: {
            type: import("vue").PropType<number>;
            required: true;
            default: number;
        };
        preset: {
            type: import("vue").PropType<string | undefined>;
            required: false;
            default: undefined;
        };
        modelValue: {
            type: import("vue").PropType<Date | undefined>;
            required: false;
            default: undefined;
        };
        hoursFilter: {
            type: import("vue").PropType<((h: number) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
        minutesFilter: {
            type: import("vue").PropType<((h: number) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
        secondsFilter: {
            type: import("vue").PropType<((h: number) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
    }>>;
    dropdownPropsComputed: import("vue").ComputedRef<{
        closeOnContentClick: boolean;
        offset: import("../va-dropdown/types").DropdownOffsetProp;
        keyboardNavigation: boolean;
        placement: import("..").Placement;
        innerAnchorSelector: string;
        readonly: boolean;
        stateful: boolean;
        disabled: boolean;
        anchorSelector: string;
        preventOverflow: boolean;
        keepAnchorWidth: boolean;
        isContentHoverable: boolean;
        closeOnClickOutside: boolean;
        closeOnAnchorClick: boolean;
        hoverOverTimeout: number;
        hoverOutTimeout: number;
        stickToEdges: boolean;
        autoPlacement: boolean;
        cursor: boolean;
        trigger: "none" | "click" | "right-click" | "hover" | "dblclick";
        preset?: string | undefined;
        modelValue?: boolean | undefined;
        target?: import("../../composables").MaybeHTMLElementOrSelector;
    }>;
    computedInputWrapperProps: import("vue").ComputedRef<{
        focused: boolean;
        error: boolean;
        errorMessages: string[];
        readonly: boolean;
        label: string;
        color: string;
        outline: boolean;
        background: string;
        disabled: boolean;
        bordered: boolean;
        messages: string | string[];
        errorCount: string | number;
        success: boolean;
        immediateValidation: boolean;
        requiredMark: boolean;
        modelValue?: undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        counterValue?: number | undefined;
        rules?: ((v: any) => any)[] | undefined;
        "onClick-prepend"?: ((...args: any[]) => any) | undefined;
        "onClick-append"?: ((...args: any[]) => any) | undefined;
        "onClick-prepend-inner"?: ((...args: any[]) => any) | undefined;
        "onClick-append-inner"?: ((...args: any[]) => any) | undefined;
        maxLength?: number | undefined;
    }>;
    computedInputListeners: import("vue").ComputedRef<{
        focus: () => void;
        blur: () => void;
    }>;
    isOpenSync: import("vue").WritableComputedRef<boolean>;
    doShowDropdown: import("vue").WritableComputedRef<boolean>;
    modelValueSync: import("vue").WritableComputedRef<Date | undefined>;
    valueText: import("vue").ComputedRef<string>;
    onInputTextChanged: (e: Event) => void;
    canBeClearedComputed: import("vue").ComputedRef<boolean>;
    iconProps: import("vue").ComputedRef<{
        role: string;
        ariaHidden: boolean;
        size: string;
        name: string;
        color: string;
        tabindex: number;
    }>;
    clearIconProps: import("vue").ComputedRef<{
        name: string;
        color: string;
        size: string;
    }>;
    filteredSlots: import("vue").ComputedRef<string[]>;
    inputAttributesComputed: import("vue").ComputedRef<{
        'aria-invalid': boolean;
        'aria-errormessage': string;
        readonly: boolean;
        tabindex: number;
        value: string;
        ariaLabel: string;
        ariaRequired: boolean;
        ariaDisabled: boolean;
        ariaReadOnly: boolean;
    }>;
    cursorStyleComputed: import("vue").ComputedRef<{
        cursor?: undefined;
    } | {
        cursor: string;
    }>;
    hideDropdown: () => void;
    showDropdown: (event?: KeyboardEvent | undefined, cancel?: boolean | undefined, prevent?: boolean | undefined) => void;
    toggleDropdown: (event: Event | KeyboardEvent) => void;
    reset: () => void;
    focus: () => void;
    blur: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    isOpen: {
        type: BooleanConstructor;
        default: undefined;
    };
    modelValue: {
        type: DateConstructor;
        default: undefined;
    };
    clearValue: {
        type: DateConstructor;
        default: undefined;
    };
    format: {
        type: import("vue").PropType<(date?: Date | undefined) => string>;
    };
    parse: {
        type: import("vue").PropType<(input: string) => Date>;
    };
    manualInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: import("vue").PropType<((v: any) => any)[]>;
        default: () => any;
    } & {
        type: import("vue").PropType<((v: Date) => any)[]>;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    view: {
        type: import("vue").PropType<"hours" | "minutes" | "seconds">;
        required: true;
        default: "hours" | "minutes" | "seconds";
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    cellHeight: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    ampm: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    hidePeriodSwitch: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    periodUpdatesModelValue: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    framed: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    visibleCellsCount: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    preset: {
        type: import("vue").PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    hoursFilter: {
        type: import("vue").PropType<((h: number) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    minutesFilter: {
        type: import("vue").PropType<((h: number) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    secondsFilter: {
        type: import("vue").PropType<((h: number) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    label: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    color: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    outline: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    background: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    bordered: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    focused: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    requiredMark: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    counterValue: {
        type: import("vue").PropType<number | undefined>;
        required: false;
        default: undefined;
    };
    maxLength: {
        type: import("vue").PropType<number | undefined>;
        required: false;
        default: undefined;
    };
    onClick: {
        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick-prepend": {
        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick-append": {
        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick-prepend-inner": {
        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick-append-inner": {
        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    anchorSelector: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    innerAnchorSelector: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    preventOverflow: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    keepAnchorWidth: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    isContentHoverable: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    closeOnContentClick: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    closeOnClickOutside: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    hoverOverTimeout: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    hoverOutTimeout: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    offset: {
        type: import("vue").PropType<import("../va-dropdown/types").DropdownOffsetProp>;
        required: true;
        default: import("../va-dropdown/types").DropdownOffsetProp;
    };
    stickToEdges: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    autoPlacement: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    cursor: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    trigger: {
        type: import("vue").PropType<"none" | "click" | "right-click" | "hover" | "dblclick">;
        required: true;
        default: "none" | "click" | "right-click" | "hover" | "dblclick";
    };
    placement: {
        type: import("vue").PropType<import("..").Placement>;
        required: true;
        default: import("..").Placement;
    };
    keyboardNavigation: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    target: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        required: false;
        default: undefined;
    };
}>> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    readonly: boolean;
    label: string;
    view: "hours" | "minutes" | "seconds";
    preset: string | undefined;
    modelValue: Date;
    stateful: boolean;
    target: import("../../composables").MaybeHTMLElementOrSelector;
    color: string;
    onClick: ((...args: any[]) => any) | undefined;
    icon: string;
    outline: boolean;
    background: string;
    counterValue: number | undefined;
    disabled: boolean;
    bordered: boolean;
    leftIcon: boolean;
    anchorSelector: string;
    innerAnchorSelector: string;
    preventOverflow: boolean;
    keepAnchorWidth: boolean;
    isContentHoverable: boolean;
    closeOnContentClick: boolean;
    closeOnClickOutside: boolean;
    closeOnAnchorClick: boolean;
    hoverOverTimeout: number;
    hoverOutTimeout: number;
    offset: import("../va-dropdown/types").DropdownOffsetProp;
    stickToEdges: boolean;
    autoPlacement: boolean;
    cursor: boolean;
    trigger: "none" | "click" | "right-click" | "hover" | "dblclick";
    placement: import("..").Placement;
    keyboardNavigation: boolean;
    error: boolean;
    messages: string | string[];
    errorMessages: string | string[];
    errorCount: string | number;
    rules: ((v: Date) => any)[];
    success: boolean;
    immediateValidation: boolean;
    "onClick-prepend": ((...args: any[]) => any) | undefined;
    "onClick-append": ((...args: any[]) => any) | undefined;
    "onClick-prepend-inner": ((...args: any[]) => any) | undefined;
    "onClick-append-inner": ((...args: any[]) => any) | undefined;
    maxLength: number | undefined;
    focused: boolean;
    requiredMark: boolean;
    clearable: boolean;
    clearableIcon: string;
    clearValue: Date;
    manualInput: boolean;
    isOpen: boolean;
    cellHeight: number;
    ampm: boolean;
    hidePeriodSwitch: boolean;
    periodUpdatesModelValue: boolean;
    hoursFilter: ((h: number) => boolean) | undefined;
    minutesFilter: ((h: number) => boolean) | undefined;
    secondsFilter: ((h: number) => boolean) | undefined;
    framed: boolean;
    visibleCellsCount: number;
}>;
