export declare const VaButtonDropdown: import("vue").DefineComponent<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    openedIcon: {
        type: StringConstructor;
        default: string;
    };
    hideIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableDropdown: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: import("vue").PropType<import("./types").Placement>;
        default: string;
        validator: (placement: string) => boolean;
    };
    offset: {
        type: import("vue").PropType<number | [number, number]>;
        default: number;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    split: {
        type: BooleanConstructor;
    };
    splitTo: {
        type: StringConstructor;
        default: string;
    };
    splitHref: {
        type: StringConstructor;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
    };
    readonly: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    anchorSelector: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    innerAnchorSelector: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    preventOverflow: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    isContentHoverable: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    closeOnClickOutside: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    hoverOverTimeout: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    hoverOutTimeout: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    stickToEdges: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    autoPlacement: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    cursor: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    trigger: {
        type: import("vue").PropType<"none" | "click" | "right-click" | "hover" | "dblclick">;
        required: true;
        default: "none" | "click" | "right-click" | "hover" | "dblclick";
    };
    keyboardNavigation: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    preset: {
        type: import("vue").PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    target: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        required: false;
        default: undefined;
    };
    replace: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    type: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    tag: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    color: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        required: true;
        default: "small" | "medium" | "large";
    };
    sizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        required: true;
        default: Record<string, any>;
    };
    fontSizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        required: true;
        default: Record<string, any>;
    };
    textColor: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    borderColor: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    gradient: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    textOpacity: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    backgroundOpacity: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    plain: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    round: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    iconColor: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    to: {
        type: import("vue").PropType<string | Record<string, any>>;
        required: true;
        default: string | Record<string, any>;
    };
    append: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    exact: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    activeClass: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    exactActiveClass: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    href: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    pressedBehavior: {
        type: import("vue").PropType<"mask" | "opacity">;
        required: true;
        default: "mask" | "opacity";
    };
    pressedOpacity: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    pressedMaskColor: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    hoverBehavior: {
        type: import("vue").PropType<"mask" | "opacity">;
        required: true;
        default: "mask" | "opacity";
    };
    hoverOpacity: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    hoverMaskColor: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
}, {
    vaDropdownProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        [x: string & `on${string}`]: {
            type: import("vue").PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        readonly: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        anchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string;
        };
        innerAnchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string;
        };
        preventOverflow: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        keepAnchorWidth: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        isContentHoverable: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        closeOnContentClick: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        closeOnClickOutside: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        closeOnAnchorClick: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        hoverOverTimeout: {
            type: import("vue").PropType<number>;
            required: true;
            default: number;
        };
        hoverOutTimeout: {
            type: import("vue").PropType<number>;
            required: true;
            default: number;
        };
        offset: {
            type: import("vue").PropType<import("../va-dropdown/types").DropdownOffsetProp>;
            required: true;
            default: import("../va-dropdown/types").DropdownOffsetProp;
        };
        stickToEdges: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        autoPlacement: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        cursor: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        trigger: {
            type: import("vue").PropType<"none" | "click" | "right-click" | "hover" | "dblclick">;
            required: true;
            default: "none" | "click" | "right-click" | "hover" | "dblclick";
        };
        placement: {
            type: import("vue").PropType<import("./types").Placement>;
            required: true;
            default: import("./types").Placement;
        };
        keyboardNavigation: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        preset: {
            type: import("vue").PropType<string | undefined>;
            required: false;
            default: undefined;
        };
        modelValue: {
            type: import("vue").PropType<boolean | undefined>;
            required: false;
            default: undefined;
        };
        target: {
            type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
            required: false;
            default: undefined;
        };
    }>>;
    hideDropdown: () => void;
    valueComputed: import("vue").WritableComputedRef<any>;
    computedIcon: import("vue").ComputedRef<string>;
    computedClass: {
        [x: `va-button-dropdown--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-button-dropdown--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-button-dropdown--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    computedButtonIcons: import("vue").ComputedRef<{
        [x: string]: string;
    }>;
    buttonPropsComputed: import("vue").ComputedRef<{}>;
    computedMainButtonProps: import("vue").ComputedRef<{
        to: string;
        href: string;
        loading: boolean;
    }>;
    splitButtonClassComputed: import("vue").ComputedRef<{
        'va-button-group__left-icon': boolean;
    }>;
    listeners: Record<string, any>;
    mainButtonListeners: Record<string, any>;
    tp: <Key extends string | undefined>(key: Key) => Key;
    t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    openedIcon: {
        type: StringConstructor;
        default: string;
    };
    hideIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableDropdown: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: import("vue").PropType<import("./types").Placement>;
        default: string;
        validator: (placement: string) => boolean;
    };
    offset: {
        type: import("vue").PropType<number | [number, number]>;
        default: number;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    split: {
        type: BooleanConstructor;
    };
    splitTo: {
        type: StringConstructor;
        default: string;
    };
    splitHref: {
        type: StringConstructor;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
    };
    readonly: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    anchorSelector: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    innerAnchorSelector: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    preventOverflow: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    isContentHoverable: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    closeOnClickOutside: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    hoverOverTimeout: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    hoverOutTimeout: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    stickToEdges: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    autoPlacement: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    cursor: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    trigger: {
        type: import("vue").PropType<"none" | "click" | "right-click" | "hover" | "dblclick">;
        required: true;
        default: "none" | "click" | "right-click" | "hover" | "dblclick";
    };
    keyboardNavigation: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    preset: {
        type: import("vue").PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    target: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        required: false;
        default: undefined;
    };
    replace: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    type: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    tag: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    color: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        required: true;
        default: "small" | "medium" | "large";
    };
    sizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        required: true;
        default: Record<string, any>;
    };
    fontSizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        required: true;
        default: Record<string, any>;
    };
    textColor: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    borderColor: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    gradient: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    textOpacity: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    backgroundOpacity: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    plain: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    round: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    iconColor: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    to: {
        type: import("vue").PropType<string | Record<string, any>>;
        required: true;
        default: string | Record<string, any>;
    };
    append: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    exact: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    activeClass: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    exactActiveClass: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    href: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    pressedBehavior: {
        type: import("vue").PropType<"mask" | "opacity">;
        required: true;
        default: "mask" | "opacity";
    };
    pressedOpacity: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    pressedMaskColor: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    hoverBehavior: {
        type: import("vue").PropType<"mask" | "opacity">;
        required: true;
        default: "mask" | "opacity";
    };
    hoverOpacity: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    hoverMaskColor: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
}>> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    readonly: boolean;
    replace: boolean;
    split: boolean;
    type: string;
    preset: string | undefined;
    modelValue: boolean;
    stateful: boolean;
    target: import("../../composables").MaybeHTMLElementOrSelector;
    tag: string;
    color: string;
    size: "small" | "medium" | "large";
    sizesConfig: Record<string, any>;
    fontSizesConfig: Record<string, any>;
    textColor: string;
    icon: string;
    borderColor: string;
    gradient: boolean;
    loading: boolean;
    disabled: boolean;
    textOpacity: number;
    backgroundOpacity: number;
    plain: boolean;
    round: boolean;
    iconColor: string;
    to: string | Record<string, any>;
    append: boolean;
    exact: boolean;
    activeClass: string;
    exactActiveClass: string;
    href: string;
    pressedBehavior: "mask" | "opacity";
    pressedOpacity: number;
    pressedMaskColor: string;
    hoverBehavior: "mask" | "opacity";
    hoverOpacity: number;
    hoverMaskColor: string;
    leftIcon: boolean;
    anchorSelector: string;
    innerAnchorSelector: string;
    preventOverflow: boolean;
    keepAnchorWidth: boolean;
    isContentHoverable: boolean;
    closeOnContentClick: boolean;
    closeOnClickOutside: boolean;
    closeOnAnchorClick: boolean;
    hoverOverTimeout: number;
    hoverOutTimeout: number;
    offset: number | [number, number];
    stickToEdges: boolean;
    autoPlacement: boolean;
    cursor: boolean;
    trigger: "none" | "click" | "right-click" | "hover" | "dblclick";
    placement: import("./types").Placement;
    keyboardNavigation: boolean;
    openedIcon: string;
    hideIcon: boolean;
    disableButton: boolean;
    disableDropdown: boolean;
    splitTo: string;
    splitHref: string;
}>;
export * from './types';
