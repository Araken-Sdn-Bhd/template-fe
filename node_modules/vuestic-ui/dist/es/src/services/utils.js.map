{"version":3,"file":"utils.js","sources":["../../../../src/services/utils.ts"],"sourcesContent":["//  @ts-nocheck\nimport isObject from 'lodash/isObject.js'\nimport isFunction from 'lodash/isFunction.js'\n\nimport { __DEV__ } from '../utils/global-utils'\n\nexport const sleep = (ms = 0) => {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\n// Taken from vuetify pretty much.\nexport const deepEqual = (a, b) => {\n  if (a === b) { return true }\n\n  // If the values aren't objects, they were already checked for equality\n  if (a !== Object(a) || b !== Object(b)) {\n    return false\n  }\n\n  // Handle dates as a special case\n  if (a instanceof Date && b instanceof Date) {\n    if (a.getTime() !== b.getTime()) { return false }\n  }\n\n  const props = Object.keys(a)\n\n  // Different number of props, don't bother to check\n  if (props.length !== Object.keys(b).length) {\n    return false\n  }\n\n  return props.every(p => deepEqual(a[p], b[p]))\n}\n\n// vuestic-ui warn, currently is mostly a placeholder, but later might provide ability to disable warns etc.\nexport const warn = (...attrs) => {\n  if (__DEV__) {\n    // eslint-disable-next-line  no-console\n    console.warn(...attrs)\n  }\n  return false\n}\n\nexport const hasOwnProperty = (object, key) => {\n  // See https://eslint.org/docs/rules/no-prototype-builtins for explanation\n  // on why we don't use object.hasOwnProperty directly.\n  return Object.prototype.hasOwnProperty.call(object, key)\n}\n\n// Find value in the object with an array of keys\nexport const getNestedValue = (option, propsArray) => {\n  if (propsArray.length === 0) { return option }\n\n  const nestedItem = option[propsArray[0]]\n  if (!isObject(nestedItem)) {\n    if (propsArray.length === 1) {\n      return nestedItem\n    }\n    return undefined\n  }\n  return getNestedValue(nestedItem, propsArray.slice(1))\n}\n\n/**\n * Finds value in the object using string with dots 'key.key.key'\n *\n * @param option\n * @param prop\n */\nexport const getValueByPath = <T extends Record<string, unknown>>(option: T, prop: string | keyof T) => {\n  if (prop in option) {\n    return option[prop]\n  }\n  prop = prop.replace(/^\\./, '') // remove first point symbol\n  return getNestedValue(option, prop.split('.'))\n}\n\n/**\n * Finds value of nested property inside an object.\n *\n * @param option - Object to look properties inside.\n * @param prop - String or function used to find nested property.\n */\nexport const getValueByKey = <T extends Record<string, unknown>> (\n  option: T,\n  prop: string | ((option: T) => any),\n): any => {\n  if (!option || typeof option !== 'object' || Array.isArray(option)) { return undefined }\n\n  if (!prop) { return option }\n  if (typeof prop === 'string') { return getValueByPath(option, prop) }\n  if (typeof prop === 'function') { return prop(option) }\n\n  // if `prop` has different to string or function type and can't be processed\n  return option\n}\n\nconst getRandomString = (stringLength = 4): string => {\n  return Math.random().toString(36).substring(2, stringLength + 2)\n}\n\nexport const generateUniqueId = () => {\n  return `${getRandomString(8)}-${getRandomString(4)}-${getRandomString(4)}`\n}\n\nexport const isParsableMeasure = (value: unknown) => {\n  if (typeof value === 'string') {\n    return (!isNaN(+value) ||\n      value.endsWith('px') ||\n      value.endsWith('rem'))\n  }\n  return typeof value === 'number'\n}\n\nexport const isParsablePositiveMeasure = (value: unknown) => {\n  return isParsableMeasure(value) && parseInt(value) >= 0\n}\n\n/**\n * @description checks if empty slot was passed\n * @param v - any slot\n * @param initial - flag for initial function call\n * @example checkSlotChildrenDeep(slots.default)\n */\nexport const checkSlotChildrenDeep = (v: any, initial = true): boolean => {\n  if (!v || (initial && (!isFunction(v) || !v()?.length))) { return false }\n\n  const slotData = initial ? v() : v\n\n  if (Array.isArray(slotData)) {\n    return slotData.some((el: any) => {\n      return Array.isArray(el.children) ? checkSlotChildrenDeep(el.children, false) : el.children || el.props\n    })\n  }\n\n  return !!slotData.children\n}\n"],"names":["isObject","isFunction"],"mappings":";AAMa,MAAA,QAAQ,CAAC,KAAK,MAAM;AAC/B,SAAO,IAAI,QAAQ,CAAA,YAAW,WAAW,SAAS,EAAE,CAAC;AACvD;AA2Ba,MAAA,OAAO,IAAI,UAAU;AAKzB,SAAA;AACT;AAEa,MAAA,iBAAiB,CAAC,QAAQ,QAAQ;AAG7C,SAAO,OAAO,UAAU,eAAe,KAAK,QAAQ,GAAG;AACzD;AAGa,MAAA,iBAAiB,CAAC,QAAQ,eAAe;AAChD,MAAA,WAAW,WAAW,GAAG;AAAS,WAAA;AAAA,EAAO;AAEvC,QAAA,aAAa,OAAO,WAAW;AACjC,MAAA,CAACA,WAAS,UAAU,GAAG;AACrB,QAAA,WAAW,WAAW,GAAG;AACpB,aAAA;AAAA,IACT;AACO,WAAA;AAAA,EACT;AACA,SAAO,eAAe,YAAY,WAAW,MAAM,CAAC,CAAC;AACvD;AAQa,MAAA,iBAAiB,CAAoC,QAAW,SAA2B;AACtG,MAAI,QAAQ,QAAQ;AAClB,WAAO,OAAO;AAAA,EAChB;AACO,SAAA,KAAK,QAAQ,OAAO,EAAE;AAC7B,SAAO,eAAe,QAAQ,KAAK,MAAM,GAAG,CAAC;AAC/C;AAQa,MAAA,gBAAgB,CAC3B,QACA,SACQ;AACJ,MAAA,CAAC,UAAU,OAAO,WAAW,YAAY,MAAM,QAAQ,MAAM,GAAG;AAAS,WAAA;AAAA,EAAU;AAEvF,MAAI,CAAC,MAAM;AAAS,WAAA;AAAA,EAAO;AACvB,MAAA,OAAO,SAAS,UAAU;AAAS,WAAA,eAAe,QAAQ,IAAI;AAAA,EAAE;AAChE,MAAA,OAAO,SAAS,YAAY;AAAE,WAAO,KAAK,MAAM;AAAA,EAAE;AAG/C,SAAA;AACT;AAEA,MAAM,kBAAkB,CAAC,eAAe,MAAc;AAC7C,SAAA,KAAK,OAAS,EAAA,SAAS,EAAE,EAAE,UAAU,GAAG,eAAe,CAAC;AACjE;AAEO,MAAM,mBAAmB,MAAM;AAC7B,SAAA,GAAG,gBAAgB,CAAC,KAAK,gBAAgB,CAAC,KAAK,gBAAgB,CAAC;AACzE;AAEa,MAAA,oBAAoB,CAAC,UAAmB;AAC/C,MAAA,OAAO,UAAU,UAAU;AACrB,WAAA,CAAC,MAAM,CAAC,KAAK,KACnB,MAAM,SAAS,IAAI,KACnB,MAAM,SAAS,KAAK;AAAA,EACxB;AACA,SAAO,OAAO,UAAU;AAC1B;AAEa,MAAA,4BAA4B,CAAC,UAAmB;AAC3D,SAAO,kBAAkB,KAAK,KAAK,SAAS,KAAK,KAAK;AACxD;AAQO,MAAM,wBAAwB,CAAC,GAAQ,UAAU,SAAkB;;AACpE,MAAA,CAAC,KAAM,WAAa,EAAAC,aAAW,CAAC,KAAK,CAAC,eAAA,mBAAK,UAAU;AAAS,WAAA;AAAA,EAAM;AAElE,QAAA,WAAW,UAAU,EAAA,IAAM;AAE7B,MAAA,MAAM,QAAQ,QAAQ,GAAG;AACpB,WAAA,SAAS,KAAK,CAAC,OAAY;AAChC,aAAO,MAAM,QAAQ,GAAG,QAAQ,IAAI,sBAAsB,GAAG,UAAU,KAAK,IAAI,GAAG,YAAY,GAAG;AAAA,IAAA,CACnG;AAAA,EACH;AAEO,SAAA,CAAC,CAAC,SAAS;AACpB;;"}