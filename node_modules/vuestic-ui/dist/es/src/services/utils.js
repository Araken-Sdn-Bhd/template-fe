import { f as isFunction_1, l as isObject_1 } from "../../vendor.js";
const sleep = (ms = 0) => {
  return new Promise((resolve) => setTimeout(resolve, ms));
};
const warn = (...attrs) => {
  return false;
};
const hasOwnProperty = (object, key) => {
  return Object.prototype.hasOwnProperty.call(object, key);
};
const getNestedValue = (option, propsArray) => {
  if (propsArray.length === 0) {
    return option;
  }
  const nestedItem = option[propsArray[0]];
  if (!isObject_1(nestedItem)) {
    if (propsArray.length === 1) {
      return nestedItem;
    }
    return void 0;
  }
  return getNestedValue(nestedItem, propsArray.slice(1));
};
const getValueByPath = (option, prop) => {
  if (prop in option) {
    return option[prop];
  }
  prop = prop.replace(/^\./, "");
  return getNestedValue(option, prop.split("."));
};
const getValueByKey = (option, prop) => {
  if (!option || typeof option !== "object" || Array.isArray(option)) {
    return void 0;
  }
  if (!prop) {
    return option;
  }
  if (typeof prop === "string") {
    return getValueByPath(option, prop);
  }
  if (typeof prop === "function") {
    return prop(option);
  }
  return option;
};
const getRandomString = (stringLength = 4) => {
  return Math.random().toString(36).substring(2, stringLength + 2);
};
const generateUniqueId = () => {
  return `${getRandomString(8)}-${getRandomString(4)}-${getRandomString(4)}`;
};
const isParsableMeasure = (value) => {
  if (typeof value === "string") {
    return !isNaN(+value) || value.endsWith("px") || value.endsWith("rem");
  }
  return typeof value === "number";
};
const isParsablePositiveMeasure = (value) => {
  return isParsableMeasure(value) && parseInt(value) >= 0;
};
const checkSlotChildrenDeep = (v, initial = true) => {
  var _a;
  if (!v || initial && (!isFunction_1(v) || !((_a = v()) == null ? void 0 : _a.length))) {
    return false;
  }
  const slotData = initial ? v() : v;
  if (Array.isArray(slotData)) {
    return slotData.some((el) => {
      return Array.isArray(el.children) ? checkSlotChildrenDeep(el.children, false) : el.children || el.props;
    });
  }
  return !!slotData.children;
};
export { getValueByPath as a, getValueByKey as b, checkSlotChildrenDeep as c, generateUniqueId as g, hasOwnProperty as h, isParsablePositiveMeasure as i, sleep as s, warn as w };
//# sourceMappingURL=utils.js.map
