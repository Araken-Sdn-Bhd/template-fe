import { onMounted, onBeforeUnmount } from "vue";
let observer;
let callbacks = [];
const createMutationObserver = () => {
  const runCallbacks = (mutations) => {
    for (let i = 0; i < callbacks.length; i++) {
      if (mutations.some((m) => m.target.contains(callbacks[i].el.value || null))) {
        callbacks[i].cb();
      }
    }
  };
  if (!observer) {
    observer = new MutationObserver((mutations) => {
      runCallbacks(mutations);
    });
    observer.observe(document.documentElement, {
      attributeFilter: ["style", "class"],
      subtree: true,
      attributes: true
    });
  }
};
const destroyMutationObserver = () => {
  if (!observer) {
    return;
  }
  if (callbacks.length > 0) {
    return;
  }
  observer.disconnect();
  observer = null;
};
const useDomChangesObserver = (cb, el) => {
  onMounted(() => {
    createMutationObserver();
    callbacks.push({ cb, el });
  });
  onBeforeUnmount(() => {
    callbacks = callbacks.filter((c) => c.cb !== cb);
    destroyMutationObserver();
  });
};
export { useDomChangesObserver as u };
//# sourceMappingURL=useDomChangesObserver.js.map
