import { u as useDomChangesObserver } from "./useDomChangesObserver.js";
import { g as getElementBackground } from "./utils.js";
import { ref, onMounted } from "vue";
import { u as useColors } from "../useColors.js";
import { u as useEl } from "../useEl.js";
import { e as applyColors } from "../../services/color-config/color-functions.js";
const isTransparent = (color) => color === "rgba(0, 0, 0, 0)";
const recursiveGetBackground = (element) => {
  if (!element) {
    return "#fff";
  }
  if (element.nodeType !== Node.ELEMENT_NODE) {
    return recursiveGetBackground(element.parentElement);
  }
  const bg = getElementBackground(element);
  if (!bg) {
    return recursiveGetBackground(element.parentElement);
  }
  if (isTransparent(bg)) {
    const parentBg = recursiveGetBackground(element.parentElement);
    return parentBg;
  }
  return applyColors(recursiveGetBackground(element.parentElement), bg);
};
const useElementBackground = (element) => {
  const el = element || useEl();
  const { getColor } = useColors();
  const background = ref(getColor("background-primary"));
  const updateBackground = () => {
    requestAnimationFrame(() => {
      const bg = recursiveGetBackground(el.value);
      background.value = bg;
    });
  };
  useDomChangesObserver(updateBackground, el);
  onMounted(updateBackground);
  return {
    background
  };
};
export { useElementBackground as u };
//# sourceMappingURL=useElementBackground.js.map
